pub use test_recipient::*;
/// This module was auto-generated with ethers-rs Abigen.
/// More information at: <https://github.com/gakonst/ethers-rs>
#[allow(
    clippy::enum_variant_names,
    clippy::too_many_arguments,
    clippy::upper_case_acronyms,
    clippy::type_complexity,
    dead_code,
    non_camel_case_types,
)]
pub mod test_recipient {
    #[rustfmt::skip]
    const __ABI: &str = "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\",\"components\":[],\"indexed\":true}],\"type\":\"event\",\"name\":\"OwnershipTransferred\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\",\"components\":[],\"indexed\":true},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\",\"components\":[],\"indexed\":false},{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"ReceivedCall\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"origin\",\"type\":\"uint32\",\"components\":[],\"indexed\":true},{\"internalType\":\"bytes32\",\"name\":\"sender\",\"type\":\"bytes32\",\"components\":[],\"indexed\":true},{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"ReceivedMessage\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"fooBar\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_origin\",\"type\":\"uint32\",\"components\":[]},{\"internalType\":\"bytes32\",\"name\":\"_sender\",\"type\":\"bytes32\",\"components\":[]},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"handle\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"interchainSecurityModule\",\"outputs\":[{\"internalType\":\"contract IInterchainSecurityModule\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"lastCallMessage\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"lastCaller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"lastData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"lastSender\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"renounceOwnership\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ism\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"setInterchainSecurityModule\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"transferOwnership\",\"outputs\":[]}]";
    ///The parsed JSON ABI of the contract.
    pub static TESTRECIPIENT_ABI: ::ethers::contract::Lazy<::ethers::core::abi::Abi> = ::ethers::contract::Lazy::new(||
    ::ethers::core::utils::__serde_json::from_str(__ABI).expect("ABI is always valid"));
    #[rustfmt::skip]
    const __BYTECODE: &[u8] = &[
        96,
        128,
        96,
        64,
        82,
        52,
        128,
        21,
        97,
        0,
        16,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        97,
        0,
        26,
        51,
        97,
        0,
        31,
        86,
        91,
        97,
        0,
        111,
        86,
        91,
        96,
        0,
        128,
        84,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        131,
        129,
        22,
        96,
        1,
        96,
        1,
        96,
        160,
        27,
        3,
        25,
        131,
        22,
        129,
        23,
        132,
        85,
        96,
        64,
        81,
        145,
        144,
        146,
        22,
        146,
        131,
        145,
        127,
        139,
        224,
        7,
        156,
        83,
        22,
        89,
        20,
        19,
        68,
        205,
        31,
        208,
        164,
        242,
        132,
        25,
        73,
        127,
        151,
        34,
        163,
        218,
        175,
        227,
        180,
        24,
        111,
        107,
        100,
        87,
        224,
        145,
        144,
        163,
        80,
        80,
        86,
        91,
        97,
        9,
        211,
        128,
        97,
        0,
        126,
        96,
        0,
        57,
        96,
        0,
        243,
        254,
        96,
        128,
        96,
        64,
        82,
        52,
        128,
        21,
        97,
        0,
        16,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        96,
        4,
        54,
        16,
        97,
        0,
        200,
        87,
        96,
        0,
        53,
        96,
        224,
        28,
        128,
        99,
        113,
        80,
        24,
        166,
        17,
        97,
        0,
        129,
        87,
        128,
        99,
        222,
        82,
        60,
        243,
        17,
        97,
        0,
        91,
        87,
        128,
        99,
        222,
        82,
        60,
        243,
        20,
        97,
        1,
        157,
        87,
        128,
        99,
        240,
        124,
        31,
        71,
        20,
        97,
        1,
        189,
        87,
        128,
        99,
        242,
        253,
        227,
        139,
        20,
        97,
        1,
        208,
        87,
        96,
        0,
        128,
        253,
        91,
        128,
        99,
        113,
        80,
        24,
        166,
        20,
        97,
        1,
        111,
        87,
        128,
        99,
        141,
        165,
        203,
        91,
        20,
        97,
        1,
        119,
        87,
        128,
        99,
        164,
        152,
        47,
        222,
        20,
        97,
        1,
        149,
        87,
        96,
        0,
        128,
        253,
        91,
        128,
        99,
        33,
        19,
        82,
        42,
        17,
        97,
        0,
        178,
        87,
        128,
        99,
        33,
        19,
        82,
        42,
        20,
        97,
        1,
        0,
        87,
        128,
        99,
        37,
        111,
        236,
        136,
        20,
        97,
        1,
        69,
        87,
        128,
        99,
        86,
        213,
        212,
        117,
        20,
        97,
        1,
        92,
        87,
        96,
        0,
        128,
        253,
        91,
        128,
        98,
        110,
        117,
        236,
        20,
        97,
        0,
        205,
        87,
        128,
        99,
        14,
        114,
        204,
        6,
        20,
        97,
        0,
        235,
        87,
        91,
        96,
        0,
        128,
        253,
        91,
        97,
        0,
        213,
        97,
        1,
        227,
        86,
        91,
        96,
        64,
        81,
        97,
        0,
        226,
        145,
        144,
        97,
        5,
        224,
        86,
        91,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        243,
        91,
        97,
        0,
        254,
        97,
        0,
        249,
        54,
        96,
        4,
        97,
        5,
        250,
        86,
        91,
        97,
        2,
        113,
        86,
        91,
        0,
        91,
        96,
        4,
        84,
        97,
        1,
        32,
        144,
        115,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        22,
        129,
        86,
        91,
        96,
        64,
        81,
        115,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        144,
        145,
        22,
        129,
        82,
        96,
        32,
        1,
        97,
        0,
        226,
        86,
        91,
        97,
        1,
        78,
        96,
        2,
        84,
        129,
        86,
        91,
        96,
        64,
        81,
        144,
        129,
        82,
        96,
        32,
        1,
        97,
        0,
        226,
        86,
        91,
        97,
        0,
        254,
        97,
        1,
        106,
        54,
        96,
        4,
        97,
        6,
        121,
        86,
        91,
        97,
        2,
        192,
        86,
        91,
        97,
        0,
        254,
        97,
        3,
        26,
        86,
        91,
        96,
        0,
        84,
        115,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        22,
        97,
        1,
        32,
        86,
        91,
        97,
        0,
        213,
        97,
        3,
        46,
        86,
        91,
        96,
        1,
        84,
        97,
        1,
        32,
        144,
        115,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        22,
        129,
        86,
        91,
        97,
        0,
        254,
        97,
        1,
        203,
        54,
        96,
        4,
        97,
        6,
        222,
        86,
        91,
        97,
        3,
        59,
        86,
        91,
        97,
        0,
        254,
        97,
        1,
        222,
        54,
        96,
        4,
        97,
        5,
        250,
        86,
        91,
        97,
        3,
        202,
        86,
        91,
        96,
        3,
        128,
        84,
        97,
        1,
        240,
        144,
        97,
        7,
        42,
        86,
        91,
        128,
        96,
        31,
        1,
        96,
        32,
        128,
        145,
        4,
        2,
        96,
        32,
        1,
        96,
        64,
        81,
        144,
        129,
        1,
        96,
        64,
        82,
        128,
        146,
        145,
        144,
        129,
        129,
        82,
        96,
        32,
        1,
        130,
        128,
        84,
        97,
        2,
        28,
        144,
        97,
        7,
        42,
        86,
        91,
        128,
        21,
        97,
        2,
        105,
        87,
        128,
        96,
        31,
        16,
        97,
        2,
        62,
        87,
        97,
        1,
        0,
        128,
        131,
        84,
        4,
        2,
        131,
        82,
        145,
        96,
        32,
        1,
        145,
        97,
        2,
        105,
        86,
        91,
        130,
        1,
        145,
        144,
        96,
        0,
        82,
        96,
        32,
        96,
        0,
        32,
        144,
        91,
        129,
        84,
        129,
        82,
        144,
        96,
        1,
        1,
        144,
        96,
        32,
        1,
        128,
        131,
        17,
        97,
        2,
        76,
        87,
        130,
        144,
        3,
        96,
        31,
        22,
        130,
        1,
        145,
        91,
        80,
        80,
        80,
        80,
        80,
        129,
        86,
        91,
        97,
        2,
        121,
        97,
        4,
        134,
        86,
        91,
        96,
        1,
        128,
        84,
        127,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        22,
        115,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        146,
        144,
        146,
        22,
        145,
        144,
        145,
        23,
        144,
        85,
        86,
        91,
        130,
        132,
        99,
        255,
        255,
        255,
        255,
        22,
        127,
        186,
        103,
        116,
        76,
        137,
        145,
        19,
        168,
        79,
        97,
        93,
        81,
        175,
        93,
        130,
        245,
        254,
        220,
        242,
        108,
        154,
        71,
        77,
        147,
        99,
        195,
        173,
        155,
        11,
        213,
        1,
        172,
        132,
        132,
        96,
        64,
        81,
        97,
        2,
        249,
        146,
        145,
        144,
        97,
        7,
        198,
        86,
        91,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        163,
        96,
        2,
        131,
        144,
        85,
        96,
        3,
        97,
        3,
        19,
        130,
        132,
        131,
        97,
        8,
        96,
        86,
        91,
        80,
        80,
        80,
        80,
        80,
        86,
        91,
        97,
        3,
        34,
        97,
        4,
        134,
        86,
        91,
        97,
        3,
        44,
        96,
        0,
        97,
        5,
        7,
        86,
        91,
        86,
        91,
        96,
        5,
        128,
        84,
        97,
        1,
        240,
        144,
        97,
        7,
        42,
        86,
        91,
        51,
        115,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        22,
        127,
        151,
        216,
        54,
        122,
        31,
        57,
        235,
        158,
        151,
        242,
        98,
        250,
        251,
        176,
        89,
        37,
        192,
        188,
        254,
        18,
        10,
        170,
        215,
        185,
        115,
        124,
        174,
        52,
        247,
        73,
        194,
        6,
        132,
        132,
        132,
        96,
        64,
        81,
        97,
        3,
        133,
        147,
        146,
        145,
        144,
        97,
        9,
        122,
        86,
        91,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        162,
        96,
        4,
        128,
        84,
        127,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        22,
        51,
        23,
        144,
        85,
        96,
        5,
        97,
        3,
        196,
        130,
        132,
        131,
        97,
        8,
        96,
        86,
        91,
        80,
        80,
        80,
        80,
        86,
        91,
        97,
        3,
        210,
        97,
        4,
        134,
        86,
        91,
        115,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        129,
        22,
        97,
        4,
        122,
        87,
        96,
        64,
        81,
        127,
        8,
        195,
        121,
        160,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        82,
        96,
        38,
        96,
        36,
        130,
        1,
        82,
        127,
        79,
        119,
        110,
        97,
        98,
        108,
        101,
        58,
        32,
        110,
        101,
        119,
        32,
        111,
        119,
        110,
        101,
        114,
        32,
        105,
        115,
        32,
        116,
        104,
        101,
        32,
        122,
        101,
        114,
        111,
        32,
        97,
        96,
        68,
        130,
        1,
        82,
        127,
        100,
        100,
        114,
        101,
        115,
        115,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        96,
        100,
        130,
        1,
        82,
        96,
        132,
        1,
        91,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        97,
        4,
        131,
        129,
        97,
        5,
        7,
        86,
        91,
        80,
        86,
        91,
        96,
        0,
        84,
        115,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        22,
        51,
        20,
        97,
        3,
        44,
        87,
        96,
        64,
        81,
        127,
        8,
        195,
        121,
        160,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        129,
        144,
        82,
        96,
        36,
        130,
        1,
        82,
        127,
        79,
        119,
        110,
        97,
        98,
        108,
        101,
        58,
        32,
        99,
        97,
        108,
        108,
        101,
        114,
        32,
        105,
        115,
        32,
        110,
        111,
        116,
        32,
        116,
        104,
        101,
        32,
        111,
        119,
        110,
        101,
        114,
        96,
        68,
        130,
        1,
        82,
        96,
        100,
        1,
        97,
        4,
        113,
        86,
        91,
        96,
        0,
        128,
        84,
        115,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        131,
        129,
        22,
        127,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        131,
        22,
        129,
        23,
        132,
        85,
        96,
        64,
        81,
        145,
        144,
        146,
        22,
        146,
        131,
        145,
        127,
        139,
        224,
        7,
        156,
        83,
        22,
        89,
        20,
        19,
        68,
        205,
        31,
        208,
        164,
        242,
        132,
        25,
        73,
        127,
        151,
        34,
        163,
        218,
        175,
        227,
        180,
        24,
        111,
        107,
        100,
        87,
        224,
        145,
        144,
        163,
        80,
        80,
        86,
        91,
        96,
        0,
        129,
        81,
        128,
        132,
        82,
        96,
        0,
        91,
        129,
        129,
        16,
        21,
        97,
        5,
        162,
        87,
        96,
        32,
        129,
        133,
        1,
        129,
        1,
        81,
        134,
        131,
        1,
        130,
        1,
        82,
        1,
        97,
        5,
        134,
        86,
        91,
        80,
        96,
        0,
        96,
        32,
        130,
        134,
        1,
        1,
        82,
        96,
        32,
        127,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        224,
        96,
        31,
        131,
        1,
        22,
        133,
        1,
        1,
        145,
        80,
        80,
        146,
        145,
        80,
        80,
        86,
        91,
        96,
        32,
        129,
        82,
        96,
        0,
        97,
        5,
        243,
        96,
        32,
        131,
        1,
        132,
        97,
        5,
        124,
        86,
        91,
        147,
        146,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        96,
        32,
        130,
        132,
        3,
        18,
        21,
        97,
        6,
        12,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        53,
        115,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        129,
        22,
        129,
        20,
        97,
        5,
        243,
        87,
        96,
        0,
        128,
        253,
        91,
        96,
        0,
        128,
        131,
        96,
        31,
        132,
        1,
        18,
        97,
        6,
        66,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        129,
        53,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        129,
        17,
        21,
        97,
        6,
        90,
        87,
        96,
        0,
        128,
        253,
        91,
        96,
        32,
        131,
        1,
        145,
        80,
        131,
        96,
        32,
        130,
        133,
        1,
        1,
        17,
        21,
        97,
        6,
        114,
        87,
        96,
        0,
        128,
        253,
        91,
        146,
        80,
        146,
        144,
        80,
        86,
        91,
        96,
        0,
        128,
        96,
        0,
        128,
        96,
        96,
        133,
        135,
        3,
        18,
        21,
        97,
        6,
        143,
        87,
        96,
        0,
        128,
        253,
        91,
        132,
        53,
        99,
        255,
        255,
        255,
        255,
        129,
        22,
        129,
        20,
        97,
        6,
        163,
        87,
        96,
        0,
        128,
        253,
        91,
        147,
        80,
        96,
        32,
        133,
        1,
        53,
        146,
        80,
        96,
        64,
        133,
        1,
        53,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        129,
        17,
        21,
        97,
        6,
        198,
        87,
        96,
        0,
        128,
        253,
        91,
        97,
        6,
        210,
        135,
        130,
        136,
        1,
        97,
        6,
        48,
        86,
        91,
        149,
        152,
        148,
        151,
        80,
        149,
        80,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        128,
        96,
        0,
        96,
        64,
        132,
        134,
        3,
        18,
        21,
        97,
        6,
        243,
        87,
        96,
        0,
        128,
        253,
        91,
        131,
        53,
        146,
        80,
        96,
        32,
        132,
        1,
        53,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        129,
        17,
        21,
        97,
        7,
        17,
        87,
        96,
        0,
        128,
        253,
        91,
        97,
        7,
        29,
        134,
        130,
        135,
        1,
        97,
        6,
        48,
        86,
        91,
        148,
        151,
        144,
        150,
        80,
        147,
        148,
        80,
        80,
        80,
        80,
        86,
        91,
        96,
        1,
        129,
        129,
        28,
        144,
        130,
        22,
        128,
        97,
        7,
        62,
        87,
        96,
        127,
        130,
        22,
        145,
        80,
        91,
        96,
        32,
        130,
        16,
        129,
        3,
        97,
        7,
        119,
        87,
        127,
        78,
        72,
        123,
        113,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        96,
        0,
        82,
        96,
        34,
        96,
        4,
        82,
        96,
        36,
        96,
        0,
        253,
        91,
        80,
        145,
        144,
        80,
        86,
        91,
        129,
        131,
        82,
        129,
        129,
        96,
        32,
        133,
        1,
        55,
        80,
        96,
        0,
        96,
        32,
        130,
        132,
        1,
        1,
        82,
        96,
        0,
        96,
        32,
        127,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        224,
        96,
        31,
        132,
        1,
        22,
        132,
        1,
        1,
        144,
        80,
        146,
        145,
        80,
        80,
        86,
        91,
        96,
        32,
        129,
        82,
        96,
        0,
        97,
        7,
        218,
        96,
        32,
        131,
        1,
        132,
        134,
        97,
        7,
        125,
        86,
        91,
        148,
        147,
        80,
        80,
        80,
        80,
        86,
        91,
        127,
        78,
        72,
        123,
        113,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        96,
        0,
        82,
        96,
        65,
        96,
        4,
        82,
        96,
        36,
        96,
        0,
        253,
        91,
        96,
        31,
        130,
        17,
        21,
        97,
        8,
        91,
        87,
        96,
        0,
        129,
        129,
        82,
        96,
        32,
        129,
        32,
        96,
        31,
        133,
        1,
        96,
        5,
        28,
        129,
        1,
        96,
        32,
        134,
        16,
        21,
        97,
        8,
        56,
        87,
        80,
        128,
        91,
        96,
        31,
        133,
        1,
        96,
        5,
        28,
        130,
        1,
        145,
        80,
        91,
        129,
        129,
        16,
        21,
        97,
        8,
        87,
        87,
        130,
        129,
        85,
        96,
        1,
        1,
        97,
        8,
        68,
        86,
        91,
        80,
        80,
        80,
        91,
        80,
        80,
        80,
        86,
        91,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        131,
        17,
        21,
        97,
        8,
        120,
        87,
        97,
        8,
        120,
        97,
        7,
        226,
        86,
        91,
        97,
        8,
        140,
        131,
        97,
        8,
        134,
        131,
        84,
        97,
        7,
        42,
        86,
        91,
        131,
        97,
        8,
        17,
        86,
        91,
        96,
        0,
        96,
        31,
        132,
        17,
        96,
        1,
        129,
        20,
        97,
        8,
        222,
        87,
        96,
        0,
        133,
        21,
        97,
        8,
        168,
        87,
        80,
        131,
        130,
        1,
        53,
        91,
        127,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        96,
        3,
        135,
        144,
        27,
        28,
        25,
        22,
        96,
        1,
        134,
        144,
        27,
        23,
        131,
        85,
        97,
        3,
        19,
        86,
        91,
        96,
        0,
        131,
        129,
        82,
        96,
        32,
        144,
        32,
        127,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        224,
        134,
        22,
        144,
        131,
        91,
        130,
        129,
        16,
        21,
        97,
        9,
        45,
        87,
        134,
        133,
        1,
        53,
        130,
        85,
        96,
        32,
        148,
        133,
        1,
        148,
        96,
        1,
        144,
        146,
        1,
        145,
        1,
        97,
        9,
        13,
        86,
        91,
        80,
        134,
        130,
        16,
        21,
        97,
        9,
        104,
        87,
        127,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        96,
        248,
        136,
        96,
        3,
        27,
        22,
        28,
        25,
        132,
        135,
        1,
        53,
        22,
        129,
        85,
        91,
        80,
        80,
        96,
        1,
        133,
        96,
        1,
        27,
        1,
        131,
        85,
        80,
        80,
        80,
        80,
        80,
        86,
        91,
        131,
        129,
        82,
        96,
        64,
        96,
        32,
        130,
        1,
        82,
        96,
        0,
        97,
        9,
        148,
        96,
        64,
        131,
        1,
        132,
        134,
        97,
        7,
        125,
        86,
        91,
        149,
        148,
        80,
        80,
        80,
        80,
        80,
        86,
        254,
        162,
        100,
        105,
        112,
        102,
        115,
        88,
        34,
        18,
        32,
        151,
        22,
        153,
        41,
        43,
        185,
        4,
        246,
        8,
        91,
        141,
        172,
        184,
        220,
        215,
        47,
        45,
        119,
        124,
        108,
        70,
        96,
        191,
        214,
        92,
        99,
        204,
        252,
        186,
        116,
        181,
        247,
        100,
        115,
        111,
        108,
        99,
        67,
        0,
        8,
        17,
        0,
        51,
    ];
    ///The bytecode of the contract.
    pub static TESTRECIPIENT_BYTECODE: ::ethers::core::types::Bytes = ::ethers::core::types::Bytes::from_static(
        __BYTECODE,
    );
    #[rustfmt::skip]
    const __DEPLOYED_BYTECODE: &[u8] = &[
        96,
        128,
        96,
        64,
        82,
        52,
        128,
        21,
        97,
        0,
        16,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        96,
        4,
        54,
        16,
        97,
        0,
        200,
        87,
        96,
        0,
        53,
        96,
        224,
        28,
        128,
        99,
        113,
        80,
        24,
        166,
        17,
        97,
        0,
        129,
        87,
        128,
        99,
        222,
        82,
        60,
        243,
        17,
        97,
        0,
        91,
        87,
        128,
        99,
        222,
        82,
        60,
        243,
        20,
        97,
        1,
        157,
        87,
        128,
        99,
        240,
        124,
        31,
        71,
        20,
        97,
        1,
        189,
        87,
        128,
        99,
        242,
        253,
        227,
        139,
        20,
        97,
        1,
        208,
        87,
        96,
        0,
        128,
        253,
        91,
        128,
        99,
        113,
        80,
        24,
        166,
        20,
        97,
        1,
        111,
        87,
        128,
        99,
        141,
        165,
        203,
        91,
        20,
        97,
        1,
        119,
        87,
        128,
        99,
        164,
        152,
        47,
        222,
        20,
        97,
        1,
        149,
        87,
        96,
        0,
        128,
        253,
        91,
        128,
        99,
        33,
        19,
        82,
        42,
        17,
        97,
        0,
        178,
        87,
        128,
        99,
        33,
        19,
        82,
        42,
        20,
        97,
        1,
        0,
        87,
        128,
        99,
        37,
        111,
        236,
        136,
        20,
        97,
        1,
        69,
        87,
        128,
        99,
        86,
        213,
        212,
        117,
        20,
        97,
        1,
        92,
        87,
        96,
        0,
        128,
        253,
        91,
        128,
        98,
        110,
        117,
        236,
        20,
        97,
        0,
        205,
        87,
        128,
        99,
        14,
        114,
        204,
        6,
        20,
        97,
        0,
        235,
        87,
        91,
        96,
        0,
        128,
        253,
        91,
        97,
        0,
        213,
        97,
        1,
        227,
        86,
        91,
        96,
        64,
        81,
        97,
        0,
        226,
        145,
        144,
        97,
        5,
        224,
        86,
        91,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        243,
        91,
        97,
        0,
        254,
        97,
        0,
        249,
        54,
        96,
        4,
        97,
        5,
        250,
        86,
        91,
        97,
        2,
        113,
        86,
        91,
        0,
        91,
        96,
        4,
        84,
        97,
        1,
        32,
        144,
        115,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        22,
        129,
        86,
        91,
        96,
        64,
        81,
        115,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        144,
        145,
        22,
        129,
        82,
        96,
        32,
        1,
        97,
        0,
        226,
        86,
        91,
        97,
        1,
        78,
        96,
        2,
        84,
        129,
        86,
        91,
        96,
        64,
        81,
        144,
        129,
        82,
        96,
        32,
        1,
        97,
        0,
        226,
        86,
        91,
        97,
        0,
        254,
        97,
        1,
        106,
        54,
        96,
        4,
        97,
        6,
        121,
        86,
        91,
        97,
        2,
        192,
        86,
        91,
        97,
        0,
        254,
        97,
        3,
        26,
        86,
        91,
        96,
        0,
        84,
        115,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        22,
        97,
        1,
        32,
        86,
        91,
        97,
        0,
        213,
        97,
        3,
        46,
        86,
        91,
        96,
        1,
        84,
        97,
        1,
        32,
        144,
        115,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        22,
        129,
        86,
        91,
        97,
        0,
        254,
        97,
        1,
        203,
        54,
        96,
        4,
        97,
        6,
        222,
        86,
        91,
        97,
        3,
        59,
        86,
        91,
        97,
        0,
        254,
        97,
        1,
        222,
        54,
        96,
        4,
        97,
        5,
        250,
        86,
        91,
        97,
        3,
        202,
        86,
        91,
        96,
        3,
        128,
        84,
        97,
        1,
        240,
        144,
        97,
        7,
        42,
        86,
        91,
        128,
        96,
        31,
        1,
        96,
        32,
        128,
        145,
        4,
        2,
        96,
        32,
        1,
        96,
        64,
        81,
        144,
        129,
        1,
        96,
        64,
        82,
        128,
        146,
        145,
        144,
        129,
        129,
        82,
        96,
        32,
        1,
        130,
        128,
        84,
        97,
        2,
        28,
        144,
        97,
        7,
        42,
        86,
        91,
        128,
        21,
        97,
        2,
        105,
        87,
        128,
        96,
        31,
        16,
        97,
        2,
        62,
        87,
        97,
        1,
        0,
        128,
        131,
        84,
        4,
        2,
        131,
        82,
        145,
        96,
        32,
        1,
        145,
        97,
        2,
        105,
        86,
        91,
        130,
        1,
        145,
        144,
        96,
        0,
        82,
        96,
        32,
        96,
        0,
        32,
        144,
        91,
        129,
        84,
        129,
        82,
        144,
        96,
        1,
        1,
        144,
        96,
        32,
        1,
        128,
        131,
        17,
        97,
        2,
        76,
        87,
        130,
        144,
        3,
        96,
        31,
        22,
        130,
        1,
        145,
        91,
        80,
        80,
        80,
        80,
        80,
        129,
        86,
        91,
        97,
        2,
        121,
        97,
        4,
        134,
        86,
        91,
        96,
        1,
        128,
        84,
        127,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        22,
        115,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        146,
        144,
        146,
        22,
        145,
        144,
        145,
        23,
        144,
        85,
        86,
        91,
        130,
        132,
        99,
        255,
        255,
        255,
        255,
        22,
        127,
        186,
        103,
        116,
        76,
        137,
        145,
        19,
        168,
        79,
        97,
        93,
        81,
        175,
        93,
        130,
        245,
        254,
        220,
        242,
        108,
        154,
        71,
        77,
        147,
        99,
        195,
        173,
        155,
        11,
        213,
        1,
        172,
        132,
        132,
        96,
        64,
        81,
        97,
        2,
        249,
        146,
        145,
        144,
        97,
        7,
        198,
        86,
        91,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        163,
        96,
        2,
        131,
        144,
        85,
        96,
        3,
        97,
        3,
        19,
        130,
        132,
        131,
        97,
        8,
        96,
        86,
        91,
        80,
        80,
        80,
        80,
        80,
        86,
        91,
        97,
        3,
        34,
        97,
        4,
        134,
        86,
        91,
        97,
        3,
        44,
        96,
        0,
        97,
        5,
        7,
        86,
        91,
        86,
        91,
        96,
        5,
        128,
        84,
        97,
        1,
        240,
        144,
        97,
        7,
        42,
        86,
        91,
        51,
        115,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        22,
        127,
        151,
        216,
        54,
        122,
        31,
        57,
        235,
        158,
        151,
        242,
        98,
        250,
        251,
        176,
        89,
        37,
        192,
        188,
        254,
        18,
        10,
        170,
        215,
        185,
        115,
        124,
        174,
        52,
        247,
        73,
        194,
        6,
        132,
        132,
        132,
        96,
        64,
        81,
        97,
        3,
        133,
        147,
        146,
        145,
        144,
        97,
        9,
        122,
        86,
        91,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        162,
        96,
        4,
        128,
        84,
        127,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        22,
        51,
        23,
        144,
        85,
        96,
        5,
        97,
        3,
        196,
        130,
        132,
        131,
        97,
        8,
        96,
        86,
        91,
        80,
        80,
        80,
        80,
        86,
        91,
        97,
        3,
        210,
        97,
        4,
        134,
        86,
        91,
        115,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        129,
        22,
        97,
        4,
        122,
        87,
        96,
        64,
        81,
        127,
        8,
        195,
        121,
        160,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        82,
        96,
        38,
        96,
        36,
        130,
        1,
        82,
        127,
        79,
        119,
        110,
        97,
        98,
        108,
        101,
        58,
        32,
        110,
        101,
        119,
        32,
        111,
        119,
        110,
        101,
        114,
        32,
        105,
        115,
        32,
        116,
        104,
        101,
        32,
        122,
        101,
        114,
        111,
        32,
        97,
        96,
        68,
        130,
        1,
        82,
        127,
        100,
        100,
        114,
        101,
        115,
        115,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        96,
        100,
        130,
        1,
        82,
        96,
        132,
        1,
        91,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        253,
        91,
        97,
        4,
        131,
        129,
        97,
        5,
        7,
        86,
        91,
        80,
        86,
        91,
        96,
        0,
        84,
        115,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        22,
        51,
        20,
        97,
        3,
        44,
        87,
        96,
        64,
        81,
        127,
        8,
        195,
        121,
        160,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        129,
        82,
        96,
        32,
        96,
        4,
        130,
        1,
        129,
        144,
        82,
        96,
        36,
        130,
        1,
        82,
        127,
        79,
        119,
        110,
        97,
        98,
        108,
        101,
        58,
        32,
        99,
        97,
        108,
        108,
        101,
        114,
        32,
        105,
        115,
        32,
        110,
        111,
        116,
        32,
        116,
        104,
        101,
        32,
        111,
        119,
        110,
        101,
        114,
        96,
        68,
        130,
        1,
        82,
        96,
        100,
        1,
        97,
        4,
        113,
        86,
        91,
        96,
        0,
        128,
        84,
        115,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        131,
        129,
        22,
        127,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        131,
        22,
        129,
        23,
        132,
        85,
        96,
        64,
        81,
        145,
        144,
        146,
        22,
        146,
        131,
        145,
        127,
        139,
        224,
        7,
        156,
        83,
        22,
        89,
        20,
        19,
        68,
        205,
        31,
        208,
        164,
        242,
        132,
        25,
        73,
        127,
        151,
        34,
        163,
        218,
        175,
        227,
        180,
        24,
        111,
        107,
        100,
        87,
        224,
        145,
        144,
        163,
        80,
        80,
        86,
        91,
        96,
        0,
        129,
        81,
        128,
        132,
        82,
        96,
        0,
        91,
        129,
        129,
        16,
        21,
        97,
        5,
        162,
        87,
        96,
        32,
        129,
        133,
        1,
        129,
        1,
        81,
        134,
        131,
        1,
        130,
        1,
        82,
        1,
        97,
        5,
        134,
        86,
        91,
        80,
        96,
        0,
        96,
        32,
        130,
        134,
        1,
        1,
        82,
        96,
        32,
        127,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        224,
        96,
        31,
        131,
        1,
        22,
        133,
        1,
        1,
        145,
        80,
        80,
        146,
        145,
        80,
        80,
        86,
        91,
        96,
        32,
        129,
        82,
        96,
        0,
        97,
        5,
        243,
        96,
        32,
        131,
        1,
        132,
        97,
        5,
        124,
        86,
        91,
        147,
        146,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        96,
        32,
        130,
        132,
        3,
        18,
        21,
        97,
        6,
        12,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        53,
        115,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        129,
        22,
        129,
        20,
        97,
        5,
        243,
        87,
        96,
        0,
        128,
        253,
        91,
        96,
        0,
        128,
        131,
        96,
        31,
        132,
        1,
        18,
        97,
        6,
        66,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        129,
        53,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        129,
        17,
        21,
        97,
        6,
        90,
        87,
        96,
        0,
        128,
        253,
        91,
        96,
        32,
        131,
        1,
        145,
        80,
        131,
        96,
        32,
        130,
        133,
        1,
        1,
        17,
        21,
        97,
        6,
        114,
        87,
        96,
        0,
        128,
        253,
        91,
        146,
        80,
        146,
        144,
        80,
        86,
        91,
        96,
        0,
        128,
        96,
        0,
        128,
        96,
        96,
        133,
        135,
        3,
        18,
        21,
        97,
        6,
        143,
        87,
        96,
        0,
        128,
        253,
        91,
        132,
        53,
        99,
        255,
        255,
        255,
        255,
        129,
        22,
        129,
        20,
        97,
        6,
        163,
        87,
        96,
        0,
        128,
        253,
        91,
        147,
        80,
        96,
        32,
        133,
        1,
        53,
        146,
        80,
        96,
        64,
        133,
        1,
        53,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        129,
        17,
        21,
        97,
        6,
        198,
        87,
        96,
        0,
        128,
        253,
        91,
        97,
        6,
        210,
        135,
        130,
        136,
        1,
        97,
        6,
        48,
        86,
        91,
        149,
        152,
        148,
        151,
        80,
        149,
        80,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        128,
        96,
        0,
        96,
        64,
        132,
        134,
        3,
        18,
        21,
        97,
        6,
        243,
        87,
        96,
        0,
        128,
        253,
        91,
        131,
        53,
        146,
        80,
        96,
        32,
        132,
        1,
        53,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        129,
        17,
        21,
        97,
        7,
        17,
        87,
        96,
        0,
        128,
        253,
        91,
        97,
        7,
        29,
        134,
        130,
        135,
        1,
        97,
        6,
        48,
        86,
        91,
        148,
        151,
        144,
        150,
        80,
        147,
        148,
        80,
        80,
        80,
        80,
        86,
        91,
        96,
        1,
        129,
        129,
        28,
        144,
        130,
        22,
        128,
        97,
        7,
        62,
        87,
        96,
        127,
        130,
        22,
        145,
        80,
        91,
        96,
        32,
        130,
        16,
        129,
        3,
        97,
        7,
        119,
        87,
        127,
        78,
        72,
        123,
        113,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        96,
        0,
        82,
        96,
        34,
        96,
        4,
        82,
        96,
        36,
        96,
        0,
        253,
        91,
        80,
        145,
        144,
        80,
        86,
        91,
        129,
        131,
        82,
        129,
        129,
        96,
        32,
        133,
        1,
        55,
        80,
        96,
        0,
        96,
        32,
        130,
        132,
        1,
        1,
        82,
        96,
        0,
        96,
        32,
        127,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        224,
        96,
        31,
        132,
        1,
        22,
        132,
        1,
        1,
        144,
        80,
        146,
        145,
        80,
        80,
        86,
        91,
        96,
        32,
        129,
        82,
        96,
        0,
        97,
        7,
        218,
        96,
        32,
        131,
        1,
        132,
        134,
        97,
        7,
        125,
        86,
        91,
        148,
        147,
        80,
        80,
        80,
        80,
        86,
        91,
        127,
        78,
        72,
        123,
        113,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        96,
        0,
        82,
        96,
        65,
        96,
        4,
        82,
        96,
        36,
        96,
        0,
        253,
        91,
        96,
        31,
        130,
        17,
        21,
        97,
        8,
        91,
        87,
        96,
        0,
        129,
        129,
        82,
        96,
        32,
        129,
        32,
        96,
        31,
        133,
        1,
        96,
        5,
        28,
        129,
        1,
        96,
        32,
        134,
        16,
        21,
        97,
        8,
        56,
        87,
        80,
        128,
        91,
        96,
        31,
        133,
        1,
        96,
        5,
        28,
        130,
        1,
        145,
        80,
        91,
        129,
        129,
        16,
        21,
        97,
        8,
        87,
        87,
        130,
        129,
        85,
        96,
        1,
        1,
        97,
        8,
        68,
        86,
        91,
        80,
        80,
        80,
        91,
        80,
        80,
        80,
        86,
        91,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        131,
        17,
        21,
        97,
        8,
        120,
        87,
        97,
        8,
        120,
        97,
        7,
        226,
        86,
        91,
        97,
        8,
        140,
        131,
        97,
        8,
        134,
        131,
        84,
        97,
        7,
        42,
        86,
        91,
        131,
        97,
        8,
        17,
        86,
        91,
        96,
        0,
        96,
        31,
        132,
        17,
        96,
        1,
        129,
        20,
        97,
        8,
        222,
        87,
        96,
        0,
        133,
        21,
        97,
        8,
        168,
        87,
        80,
        131,
        130,
        1,
        53,
        91,
        127,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        96,
        3,
        135,
        144,
        27,
        28,
        25,
        22,
        96,
        1,
        134,
        144,
        27,
        23,
        131,
        85,
        97,
        3,
        19,
        86,
        91,
        96,
        0,
        131,
        129,
        82,
        96,
        32,
        144,
        32,
        127,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        224,
        134,
        22,
        144,
        131,
        91,
        130,
        129,
        16,
        21,
        97,
        9,
        45,
        87,
        134,
        133,
        1,
        53,
        130,
        85,
        96,
        32,
        148,
        133,
        1,
        148,
        96,
        1,
        144,
        146,
        1,
        145,
        1,
        97,
        9,
        13,
        86,
        91,
        80,
        134,
        130,
        16,
        21,
        97,
        9,
        104,
        87,
        127,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        96,
        248,
        136,
        96,
        3,
        27,
        22,
        28,
        25,
        132,
        135,
        1,
        53,
        22,
        129,
        85,
        91,
        80,
        80,
        96,
        1,
        133,
        96,
        1,
        27,
        1,
        131,
        85,
        80,
        80,
        80,
        80,
        80,
        86,
        91,
        131,
        129,
        82,
        96,
        64,
        96,
        32,
        130,
        1,
        82,
        96,
        0,
        97,
        9,
        148,
        96,
        64,
        131,
        1,
        132,
        134,
        97,
        7,
        125,
        86,
        91,
        149,
        148,
        80,
        80,
        80,
        80,
        80,
        86,
        254,
        162,
        100,
        105,
        112,
        102,
        115,
        88,
        34,
        18,
        32,
        151,
        22,
        153,
        41,
        43,
        185,
        4,
        246,
        8,
        91,
        141,
        172,
        184,
        220,
        215,
        47,
        45,
        119,
        124,
        108,
        70,
        96,
        191,
        214,
        92,
        99,
        204,
        252,
        186,
        116,
        181,
        247,
        100,
        115,
        111,
        108,
        99,
        67,
        0,
        8,
        17,
        0,
        51,
    ];
    ///The deployed bytecode of the contract.
    pub static TESTRECIPIENT_DEPLOYED_BYTECODE: ::ethers::core::types::Bytes = ::ethers::core::types::Bytes::from_static(
        __DEPLOYED_BYTECODE,
    );
    pub struct TestRecipient<M>(::ethers::contract::Contract<M>);
    impl<M> ::core::clone::Clone for TestRecipient<M> {
        fn clone(&self) -> Self {
            Self(::core::clone::Clone::clone(&self.0))
        }
    }
    impl<M> ::core::ops::Deref for TestRecipient<M> {
        type Target = ::ethers::contract::Contract<M>;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl<M> ::core::ops::DerefMut for TestRecipient<M> {
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl<M> ::core::fmt::Debug for TestRecipient<M> {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple(stringify!(TestRecipient)).field(&self.address()).finish()
        }
    }
    impl<M: ::ethers::providers::Middleware> TestRecipient<M> {
        /// Creates a new contract instance with the specified `ethers` client at
        /// `address`. The contract derefs to a `ethers::Contract` object.
        pub fn new<T: Into<::ethers::core::types::Address>>(
            address: T,
            client: ::std::sync::Arc<M>,
        ) -> Self {
            Self(
                ::ethers::contract::Contract::new(
                    address.into(),
                    TESTRECIPIENT_ABI.clone(),
                    client,
                ),
            )
        }
        /// Constructs the general purpose `Deployer` instance based on the provided constructor arguments and sends it.
        /// Returns a new instance of a deployer that returns an instance of this contract after sending the transaction
        ///
        /// Notes:
        /// - If there are no constructor arguments, you should pass `()` as the argument.
        /// - The default poll duration is 7 seconds.
        /// - The default number of confirmations is 1 block.
        ///
        ///
        /// # Example
        ///
        /// Generate contract bindings with `abigen!` and deploy a new contract instance.
        ///
        /// *Note*: this requires a `bytecode` and `abi` object in the `greeter.json` artifact.
        ///
        /// ```ignore
        /// # async fn deploy<M: ethers::providers::Middleware>(client: ::std::sync::Arc<M>) {
        ///     abigen!(Greeter, "../greeter.json");
        ///
        ///    let greeter_contract = Greeter::deploy(client, "Hello world!".to_string()).unwrap().send().await.unwrap();
        ///    let msg = greeter_contract.greet().call().await.unwrap();
        /// # }
        /// ```
        pub fn deploy<T: ::ethers::core::abi::Tokenize>(
            client: ::std::sync::Arc<M>,
            constructor_args: T,
        ) -> ::core::result::Result<
            ::ethers::contract::builders::ContractDeployer<M, Self>,
            ::ethers::contract::ContractError<M>,
        > {
            let factory = ::ethers::contract::ContractFactory::new(
                TESTRECIPIENT_ABI.clone(),
                TESTRECIPIENT_BYTECODE.clone().into(),
                client,
            );
            let deployer = factory.deploy(constructor_args)?;
            let deployer = ::ethers::contract::ContractDeployer::new(deployer);
            Ok(deployer)
        }
        ///Calls the contract's `fooBar` (0xf07c1f47) function
        pub fn foo_bar(
            &self,
            amount: ::ethers::core::types::U256,
            message: ::std::string::String,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([240, 124, 31, 71], (amount, message))
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `handle` (0x56d5d475) function
        pub fn handle(
            &self,
            origin: u32,
            sender: [u8; 32],
            data: ::ethers::core::types::Bytes,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([86, 213, 212, 117], (origin, sender, data))
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `interchainSecurityModule` (0xde523cf3) function
        pub fn interchain_security_module(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<
            M,
            ::ethers::core::types::Address,
        > {
            self.0
                .method_hash([222, 82, 60, 243], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `lastCallMessage` (0xa4982fde) function
        pub fn last_call_message(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, ::std::string::String> {
            self.0
                .method_hash([164, 152, 47, 222], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `lastCaller` (0x2113522a) function
        pub fn last_caller(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<
            M,
            ::ethers::core::types::Address,
        > {
            self.0
                .method_hash([33, 19, 82, 42], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `lastData` (0x006e75ec) function
        pub fn last_data(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<
            M,
            ::ethers::core::types::Bytes,
        > {
            self.0
                .method_hash([0, 110, 117, 236], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `lastSender` (0x256fec88) function
        pub fn last_sender(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, [u8; 32]> {
            self.0
                .method_hash([37, 111, 236, 136], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `owner` (0x8da5cb5b) function
        pub fn owner(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<
            M,
            ::ethers::core::types::Address,
        > {
            self.0
                .method_hash([141, 165, 203, 91], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `renounceOwnership` (0x715018a6) function
        pub fn renounce_ownership(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([113, 80, 24, 166], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `setInterchainSecurityModule` (0x0e72cc06) function
        pub fn set_interchain_security_module(
            &self,
            ism: ::ethers::core::types::Address,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([14, 114, 204, 6], ism)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `transferOwnership` (0xf2fde38b) function
        pub fn transfer_ownership(
            &self,
            new_owner: ::ethers::core::types::Address,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([242, 253, 227, 139], new_owner)
                .expect("method not found (this should never happen)")
        }
        ///Gets the contract's `OwnershipTransferred` event
        pub fn ownership_transferred_filter(
            &self,
        ) -> ::ethers::contract::builders::Event<
            ::std::sync::Arc<M>,
            M,
            OwnershipTransferredFilter,
        > {
            self.0.event()
        }
        ///Gets the contract's `ReceivedCall` event
        pub fn received_call_filter(
            &self,
        ) -> ::ethers::contract::builders::Event<
            ::std::sync::Arc<M>,
            M,
            ReceivedCallFilter,
        > {
            self.0.event()
        }
        ///Gets the contract's `ReceivedMessage` event
        pub fn received_message_filter(
            &self,
        ) -> ::ethers::contract::builders::Event<
            ::std::sync::Arc<M>,
            M,
            ReceivedMessageFilter,
        > {
            self.0.event()
        }
        /// Returns an `Event` builder for all the events of this contract.
        pub fn events(
            &self,
        ) -> ::ethers::contract::builders::Event<
            ::std::sync::Arc<M>,
            M,
            TestRecipientEvents,
        > {
            self.0.event_with_filter(::core::default::Default::default())
        }
    }
    impl<M: ::ethers::providers::Middleware> From<::ethers::contract::Contract<M>>
    for TestRecipient<M> {
        fn from(contract: ::ethers::contract::Contract<M>) -> Self {
            Self::new(contract.address(), contract.client())
        }
    }
    #[derive(
        Clone,
        ::ethers::contract::EthEvent,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethevent(
        name = "OwnershipTransferred",
        abi = "OwnershipTransferred(address,address)"
    )]
    pub struct OwnershipTransferredFilter {
        #[ethevent(indexed)]
        pub previous_owner: ::ethers::core::types::Address,
        #[ethevent(indexed)]
        pub new_owner: ::ethers::core::types::Address,
    }
    #[derive(
        Clone,
        ::ethers::contract::EthEvent,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethevent(name = "ReceivedCall", abi = "ReceivedCall(address,uint256,string)")]
    pub struct ReceivedCallFilter {
        #[ethevent(indexed)]
        pub caller: ::ethers::core::types::Address,
        pub amount: ::ethers::core::types::U256,
        pub message: ::std::string::String,
    }
    #[derive(
        Clone,
        ::ethers::contract::EthEvent,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethevent(name = "ReceivedMessage", abi = "ReceivedMessage(uint32,bytes32,string)")]
    pub struct ReceivedMessageFilter {
        #[ethevent(indexed)]
        pub origin: u32,
        #[ethevent(indexed)]
        pub sender: [u8; 32],
        pub message: ::std::string::String,
    }
    ///Container type for all of the contract's events
    #[derive(Clone, ::ethers::contract::EthAbiType, Debug, PartialEq, Eq, Hash)]
    pub enum TestRecipientEvents {
        OwnershipTransferredFilter(OwnershipTransferredFilter),
        ReceivedCallFilter(ReceivedCallFilter),
        ReceivedMessageFilter(ReceivedMessageFilter),
    }
    impl ::ethers::contract::EthLogDecode for TestRecipientEvents {
        fn decode_log(
            log: &::ethers::core::abi::RawLog,
        ) -> ::core::result::Result<Self, ::ethers::core::abi::Error> {
            if let Ok(decoded) = OwnershipTransferredFilter::decode_log(log) {
                return Ok(TestRecipientEvents::OwnershipTransferredFilter(decoded));
            }
            if let Ok(decoded) = ReceivedCallFilter::decode_log(log) {
                return Ok(TestRecipientEvents::ReceivedCallFilter(decoded));
            }
            if let Ok(decoded) = ReceivedMessageFilter::decode_log(log) {
                return Ok(TestRecipientEvents::ReceivedMessageFilter(decoded));
            }
            Err(::ethers::core::abi::Error::InvalidData)
        }
    }
    impl ::core::fmt::Display for TestRecipientEvents {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            match self {
                Self::OwnershipTransferredFilter(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
                Self::ReceivedCallFilter(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
                Self::ReceivedMessageFilter(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
            }
        }
    }
    impl ::core::convert::From<OwnershipTransferredFilter> for TestRecipientEvents {
        fn from(value: OwnershipTransferredFilter) -> Self {
            Self::OwnershipTransferredFilter(value)
        }
    }
    impl ::core::convert::From<ReceivedCallFilter> for TestRecipientEvents {
        fn from(value: ReceivedCallFilter) -> Self {
            Self::ReceivedCallFilter(value)
        }
    }
    impl ::core::convert::From<ReceivedMessageFilter> for TestRecipientEvents {
        fn from(value: ReceivedMessageFilter) -> Self {
            Self::ReceivedMessageFilter(value)
        }
    }
    ///Container type for all input parameters for the `fooBar` function with signature `fooBar(uint256,string)` and selector `0xf07c1f47`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "fooBar", abi = "fooBar(uint256,string)")]
    pub struct FooBarCall {
        pub amount: ::ethers::core::types::U256,
        pub message: ::std::string::String,
    }
    ///Container type for all input parameters for the `handle` function with signature `handle(uint32,bytes32,bytes)` and selector `0x56d5d475`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "handle", abi = "handle(uint32,bytes32,bytes)")]
    pub struct HandleCall {
        pub origin: u32,
        pub sender: [u8; 32],
        pub data: ::ethers::core::types::Bytes,
    }
    ///Container type for all input parameters for the `interchainSecurityModule` function with signature `interchainSecurityModule()` and selector `0xde523cf3`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "interchainSecurityModule", abi = "interchainSecurityModule()")]
    pub struct InterchainSecurityModuleCall;
    ///Container type for all input parameters for the `lastCallMessage` function with signature `lastCallMessage()` and selector `0xa4982fde`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "lastCallMessage", abi = "lastCallMessage()")]
    pub struct LastCallMessageCall;
    ///Container type for all input parameters for the `lastCaller` function with signature `lastCaller()` and selector `0x2113522a`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "lastCaller", abi = "lastCaller()")]
    pub struct LastCallerCall;
    ///Container type for all input parameters for the `lastData` function with signature `lastData()` and selector `0x006e75ec`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "lastData", abi = "lastData()")]
    pub struct LastDataCall;
    ///Container type for all input parameters for the `lastSender` function with signature `lastSender()` and selector `0x256fec88`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "lastSender", abi = "lastSender()")]
    pub struct LastSenderCall;
    ///Container type for all input parameters for the `owner` function with signature `owner()` and selector `0x8da5cb5b`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "owner", abi = "owner()")]
    pub struct OwnerCall;
    ///Container type for all input parameters for the `renounceOwnership` function with signature `renounceOwnership()` and selector `0x715018a6`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "renounceOwnership", abi = "renounceOwnership()")]
    pub struct RenounceOwnershipCall;
    ///Container type for all input parameters for the `setInterchainSecurityModule` function with signature `setInterchainSecurityModule(address)` and selector `0x0e72cc06`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(
        name = "setInterchainSecurityModule",
        abi = "setInterchainSecurityModule(address)"
    )]
    pub struct SetInterchainSecurityModuleCall {
        pub ism: ::ethers::core::types::Address,
    }
    ///Container type for all input parameters for the `transferOwnership` function with signature `transferOwnership(address)` and selector `0xf2fde38b`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "transferOwnership", abi = "transferOwnership(address)")]
    pub struct TransferOwnershipCall {
        pub new_owner: ::ethers::core::types::Address,
    }
    ///Container type for all of the contract's call
    #[derive(Clone, ::ethers::contract::EthAbiType, Debug, PartialEq, Eq, Hash)]
    pub enum TestRecipientCalls {
        FooBar(FooBarCall),
        Handle(HandleCall),
        InterchainSecurityModule(InterchainSecurityModuleCall),
        LastCallMessage(LastCallMessageCall),
        LastCaller(LastCallerCall),
        LastData(LastDataCall),
        LastSender(LastSenderCall),
        Owner(OwnerCall),
        RenounceOwnership(RenounceOwnershipCall),
        SetInterchainSecurityModule(SetInterchainSecurityModuleCall),
        TransferOwnership(TransferOwnershipCall),
    }
    impl ::ethers::core::abi::AbiDecode for TestRecipientCalls {
        fn decode(
            data: impl AsRef<[u8]>,
        ) -> ::core::result::Result<Self, ::ethers::core::abi::AbiError> {
            let data = data.as_ref();
            if let Ok(decoded)
                = <FooBarCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::FooBar(decoded));
            }
            if let Ok(decoded)
                = <HandleCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::Handle(decoded));
            }
            if let Ok(decoded)
                = <InterchainSecurityModuleCall as ::ethers::core::abi::AbiDecode>::decode(
                    data,
                ) {
                return Ok(Self::InterchainSecurityModule(decoded));
            }
            if let Ok(decoded)
                = <LastCallMessageCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::LastCallMessage(decoded));
            }
            if let Ok(decoded)
                = <LastCallerCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::LastCaller(decoded));
            }
            if let Ok(decoded)
                = <LastDataCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::LastData(decoded));
            }
            if let Ok(decoded)
                = <LastSenderCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::LastSender(decoded));
            }
            if let Ok(decoded)
                = <OwnerCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::Owner(decoded));
            }
            if let Ok(decoded)
                = <RenounceOwnershipCall as ::ethers::core::abi::AbiDecode>::decode(
                    data,
                ) {
                return Ok(Self::RenounceOwnership(decoded));
            }
            if let Ok(decoded)
                = <SetInterchainSecurityModuleCall as ::ethers::core::abi::AbiDecode>::decode(
                    data,
                ) {
                return Ok(Self::SetInterchainSecurityModule(decoded));
            }
            if let Ok(decoded)
                = <TransferOwnershipCall as ::ethers::core::abi::AbiDecode>::decode(
                    data,
                ) {
                return Ok(Self::TransferOwnership(decoded));
            }
            Err(::ethers::core::abi::Error::InvalidData.into())
        }
    }
    impl ::ethers::core::abi::AbiEncode for TestRecipientCalls {
        fn encode(self) -> Vec<u8> {
            match self {
                Self::FooBar(element) => ::ethers::core::abi::AbiEncode::encode(element),
                Self::Handle(element) => ::ethers::core::abi::AbiEncode::encode(element),
                Self::InterchainSecurityModule(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::LastCallMessage(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::LastCaller(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::LastData(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::LastSender(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::Owner(element) => ::ethers::core::abi::AbiEncode::encode(element),
                Self::RenounceOwnership(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::SetInterchainSecurityModule(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::TransferOwnership(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
            }
        }
    }
    impl ::core::fmt::Display for TestRecipientCalls {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            match self {
                Self::FooBar(element) => ::core::fmt::Display::fmt(element, f),
                Self::Handle(element) => ::core::fmt::Display::fmt(element, f),
                Self::InterchainSecurityModule(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
                Self::LastCallMessage(element) => ::core::fmt::Display::fmt(element, f),
                Self::LastCaller(element) => ::core::fmt::Display::fmt(element, f),
                Self::LastData(element) => ::core::fmt::Display::fmt(element, f),
                Self::LastSender(element) => ::core::fmt::Display::fmt(element, f),
                Self::Owner(element) => ::core::fmt::Display::fmt(element, f),
                Self::RenounceOwnership(element) => ::core::fmt::Display::fmt(element, f),
                Self::SetInterchainSecurityModule(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
                Self::TransferOwnership(element) => ::core::fmt::Display::fmt(element, f),
            }
        }
    }
    impl ::core::convert::From<FooBarCall> for TestRecipientCalls {
        fn from(value: FooBarCall) -> Self {
            Self::FooBar(value)
        }
    }
    impl ::core::convert::From<HandleCall> for TestRecipientCalls {
        fn from(value: HandleCall) -> Self {
            Self::Handle(value)
        }
    }
    impl ::core::convert::From<InterchainSecurityModuleCall> for TestRecipientCalls {
        fn from(value: InterchainSecurityModuleCall) -> Self {
            Self::InterchainSecurityModule(value)
        }
    }
    impl ::core::convert::From<LastCallMessageCall> for TestRecipientCalls {
        fn from(value: LastCallMessageCall) -> Self {
            Self::LastCallMessage(value)
        }
    }
    impl ::core::convert::From<LastCallerCall> for TestRecipientCalls {
        fn from(value: LastCallerCall) -> Self {
            Self::LastCaller(value)
        }
    }
    impl ::core::convert::From<LastDataCall> for TestRecipientCalls {
        fn from(value: LastDataCall) -> Self {
            Self::LastData(value)
        }
    }
    impl ::core::convert::From<LastSenderCall> for TestRecipientCalls {
        fn from(value: LastSenderCall) -> Self {
            Self::LastSender(value)
        }
    }
    impl ::core::convert::From<OwnerCall> for TestRecipientCalls {
        fn from(value: OwnerCall) -> Self {
            Self::Owner(value)
        }
    }
    impl ::core::convert::From<RenounceOwnershipCall> for TestRecipientCalls {
        fn from(value: RenounceOwnershipCall) -> Self {
            Self::RenounceOwnership(value)
        }
    }
    impl ::core::convert::From<SetInterchainSecurityModuleCall> for TestRecipientCalls {
        fn from(value: SetInterchainSecurityModuleCall) -> Self {
            Self::SetInterchainSecurityModule(value)
        }
    }
    impl ::core::convert::From<TransferOwnershipCall> for TestRecipientCalls {
        fn from(value: TransferOwnershipCall) -> Self {
            Self::TransferOwnership(value)
        }
    }
    ///Container type for all return fields from the `interchainSecurityModule` function with signature `interchainSecurityModule()` and selector `0xde523cf3`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct InterchainSecurityModuleReturn(pub ::ethers::core::types::Address);
    ///Container type for all return fields from the `lastCallMessage` function with signature `lastCallMessage()` and selector `0xa4982fde`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct LastCallMessageReturn(pub ::std::string::String);
    ///Container type for all return fields from the `lastCaller` function with signature `lastCaller()` and selector `0x2113522a`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct LastCallerReturn(pub ::ethers::core::types::Address);
    ///Container type for all return fields from the `lastData` function with signature `lastData()` and selector `0x006e75ec`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct LastDataReturn(pub ::ethers::core::types::Bytes);
    ///Container type for all return fields from the `lastSender` function with signature `lastSender()` and selector `0x256fec88`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct LastSenderReturn(pub [u8; 32]);
    ///Container type for all return fields from the `owner` function with signature `owner()` and selector `0x8da5cb5b`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct OwnerReturn(pub ::ethers::core::types::Address);
}
