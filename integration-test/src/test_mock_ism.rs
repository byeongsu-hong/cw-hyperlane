pub use test_multisig_ism::*;
/// This module was auto-generated with ethers-rs Abigen.
/// More information at: <https://github.com/gakonst/ethers-rs>
#[allow(
    clippy::enum_variant_names,
    clippy::too_many_arguments,
    clippy::upper_case_acronyms,
    clippy::type_complexity,
    dead_code,
    non_camel_case_types,
)]
pub mod test_multisig_ism {
    #[rustfmt::skip]
    const __ABI: &str = "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"accept\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"moduleType\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_val\",\"type\":\"bool\",\"components\":[]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"setAccept\",\"outputs\":[]},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\",\"components\":[]}],\"stateMutability\":\"pure\",\"type\":\"function\",\"name\":\"validatorsAndThreshold\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\",\"components\":[]},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\",\"components\":[]},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\",\"components\":[]}],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"verify\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]}]";
    ///The parsed JSON ABI of the contract.
    pub static TESTMULTISIGISM_ABI: ::ethers::contract::Lazy<::ethers::core::abi::Abi> = ::ethers::contract::Lazy::new(||
    ::ethers::core::utils::__serde_json::from_str(__ABI).expect("ABI is always valid"));
    #[rustfmt::skip]
    const __BYTECODE: &[u8] = &[
        96,
        128,
        96,
        64,
        82,
        52,
        128,
        21,
        97,
        0,
        16,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        96,
        0,
        128,
        84,
        96,
        255,
        25,
        22,
        96,
        1,
        23,
        144,
        85,
        97,
        3,
        119,
        128,
        97,
        0,
        45,
        96,
        0,
        57,
        96,
        0,
        243,
        254,
        96,
        128,
        96,
        64,
        82,
        52,
        128,
        21,
        97,
        0,
        16,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        96,
        4,
        54,
        16,
        97,
        0,
        103,
        87,
        96,
        0,
        53,
        96,
        224,
        28,
        128,
        99,
        79,
        195,
        170,
        124,
        17,
        97,
        0,
        80,
        87,
        128,
        99,
        79,
        195,
        170,
        124,
        20,
        97,
        0,
        175,
        87,
        128,
        99,
        100,
        101,
        230,
        159,
        20,
        97,
        0,
        240,
        87,
        128,
        99,
        247,
        232,
        58,
        238,
        20,
        97,
        1,
        10,
        87,
        96,
        0,
        128,
        253,
        91,
        128,
        99,
        40,
        82,
        183,
        28,
        20,
        97,
        0,
        108,
        87,
        128,
        99,
        46,
        14,
        210,
        52,
        20,
        97,
        0,
        142,
        87,
        91,
        96,
        0,
        128,
        253,
        91,
        96,
        0,
        84,
        97,
        0,
        121,
        144,
        96,
        255,
        22,
        129,
        86,
        91,
        96,
        64,
        81,
        144,
        21,
        21,
        129,
        82,
        96,
        32,
        1,
        91,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        243,
        91,
        97,
        0,
        161,
        97,
        0,
        156,
        54,
        96,
        4,
        97,
        1,
        215,
        86,
        91,
        97,
        1,
        38,
        86,
        91,
        96,
        64,
        81,
        97,
        0,
        133,
        146,
        145,
        144,
        97,
        2,
        25,
        86,
        91,
        97,
        0,
        238,
        97,
        0,
        189,
        54,
        96,
        4,
        97,
        2,
        125,
        86,
        91,
        96,
        0,
        128,
        84,
        127,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        0,
        22,
        145,
        21,
        21,
        145,
        144,
        145,
        23,
        144,
        85,
        86,
        91,
        0,
        91,
        97,
        0,
        248,
        96,
        4,
        129,
        86,
        91,
        96,
        64,
        81,
        96,
        255,
        144,
        145,
        22,
        129,
        82,
        96,
        32,
        1,
        97,
        0,
        133,
        86,
        91,
        97,
        0,
        121,
        97,
        1,
        24,
        54,
        96,
        4,
        97,
        2,
        166,
        86,
        91,
        96,
        0,
        84,
        96,
        255,
        22,
        148,
        147,
        80,
        80,
        80,
        80,
        86,
        91,
        96,
        64,
        128,
        81,
        96,
        1,
        128,
        130,
        82,
        129,
        131,
        1,
        144,
        146,
        82,
        96,
        96,
        145,
        96,
        0,
        145,
        130,
        145,
        96,
        32,
        128,
        131,
        1,
        144,
        128,
        54,
        131,
        55,
        1,
        144,
        80,
        80,
        144,
        80,
        96,
        0,
        129,
        96,
        0,
        129,
        81,
        129,
        16,
        97,
        1,
        98,
        87,
        97,
        1,
        98,
        97,
        3,
        18,
        86,
        91,
        115,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        144,
        146,
        22,
        96,
        32,
        146,
        131,
        2,
        145,
        144,
        145,
        1,
        144,
        145,
        1,
        82,
        145,
        80,
        96,
        1,
        144,
        80,
        91,
        146,
        80,
        146,
        144,
        80,
        86,
        91,
        96,
        0,
        128,
        131,
        96,
        31,
        132,
        1,
        18,
        97,
        1,
        167,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        129,
        53,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        129,
        17,
        21,
        97,
        1,
        191,
        87,
        96,
        0,
        128,
        253,
        91,
        96,
        32,
        131,
        1,
        145,
        80,
        131,
        96,
        32,
        130,
        133,
        1,
        1,
        17,
        21,
        97,
        1,
        142,
        87,
        96,
        0,
        128,
        253,
        91,
        96,
        0,
        128,
        96,
        32,
        131,
        133,
        3,
        18,
        21,
        97,
        1,
        234,
        87,
        96,
        0,
        128,
        253,
        91,
        130,
        53,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        129,
        17,
        21,
        97,
        2,
        1,
        87,
        96,
        0,
        128,
        253,
        91,
        97,
        2,
        13,
        133,
        130,
        134,
        1,
        97,
        1,
        149,
        86,
        91,
        144,
        150,
        144,
        149,
        80,
        147,
        80,
        80,
        80,
        80,
        86,
        91,
        96,
        64,
        128,
        130,
        82,
        131,
        81,
        144,
        130,
        1,
        129,
        144,
        82,
        96,
        0,
        144,
        96,
        32,
        144,
        96,
        96,
        132,
        1,
        144,
        130,
        135,
        1,
        132,
        91,
        130,
        129,
        16,
        21,
        97,
        2,
        104,
        87,
        129,
        81,
        115,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        22,
        132,
        82,
        146,
        132,
        1,
        146,
        144,
        132,
        1,
        144,
        96,
        1,
        1,
        97,
        2,
        54,
        86,
        91,
        80,
        80,
        80,
        96,
        255,
        148,
        144,
        148,
        22,
        146,
        1,
        145,
        144,
        145,
        82,
        80,
        145,
        144,
        80,
        86,
        91,
        96,
        0,
        96,
        32,
        130,
        132,
        3,
        18,
        21,
        97,
        2,
        143,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        53,
        128,
        21,
        21,
        129,
        20,
        97,
        2,
        159,
        87,
        96,
        0,
        128,
        253,
        91,
        147,
        146,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        128,
        96,
        0,
        128,
        96,
        64,
        133,
        135,
        3,
        18,
        21,
        97,
        2,
        188,
        87,
        96,
        0,
        128,
        253,
        91,
        132,
        53,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        128,
        130,
        17,
        21,
        97,
        2,
        212,
        87,
        96,
        0,
        128,
        253,
        91,
        97,
        2,
        224,
        136,
        131,
        137,
        1,
        97,
        1,
        149,
        86,
        91,
        144,
        150,
        80,
        148,
        80,
        96,
        32,
        135,
        1,
        53,
        145,
        80,
        128,
        130,
        17,
        21,
        97,
        2,
        249,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        97,
        3,
        6,
        135,
        130,
        136,
        1,
        97,
        1,
        149,
        86,
        91,
        149,
        152,
        148,
        151,
        80,
        149,
        80,
        80,
        80,
        80,
        86,
        91,
        127,
        78,
        72,
        123,
        113,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        96,
        0,
        82,
        96,
        50,
        96,
        4,
        82,
        96,
        36,
        96,
        0,
        253,
        254,
        162,
        100,
        105,
        112,
        102,
        115,
        88,
        34,
        18,
        32,
        210,
        88,
        248,
        63,
        220,
        83,
        252,
        141,
        58,
        96,
        229,
        14,
        55,
        230,
        212,
        114,
        10,
        233,
        243,
        115,
        201,
        119,
        233,
        143,
        196,
        40,
        153,
        27,
        99,
        206,
        52,
        194,
        100,
        115,
        111,
        108,
        99,
        67,
        0,
        8,
        17,
        0,
        51,
    ];
    ///The bytecode of the contract.
    pub static TESTMULTISIGISM_BYTECODE: ::ethers::core::types::Bytes = ::ethers::core::types::Bytes::from_static(
        __BYTECODE,
    );
    #[rustfmt::skip]
    const __DEPLOYED_BYTECODE: &[u8] = &[
        96,
        128,
        96,
        64,
        82,
        52,
        128,
        21,
        97,
        0,
        16,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        96,
        4,
        54,
        16,
        97,
        0,
        103,
        87,
        96,
        0,
        53,
        96,
        224,
        28,
        128,
        99,
        79,
        195,
        170,
        124,
        17,
        97,
        0,
        80,
        87,
        128,
        99,
        79,
        195,
        170,
        124,
        20,
        97,
        0,
        175,
        87,
        128,
        99,
        100,
        101,
        230,
        159,
        20,
        97,
        0,
        240,
        87,
        128,
        99,
        247,
        232,
        58,
        238,
        20,
        97,
        1,
        10,
        87,
        96,
        0,
        128,
        253,
        91,
        128,
        99,
        40,
        82,
        183,
        28,
        20,
        97,
        0,
        108,
        87,
        128,
        99,
        46,
        14,
        210,
        52,
        20,
        97,
        0,
        142,
        87,
        91,
        96,
        0,
        128,
        253,
        91,
        96,
        0,
        84,
        97,
        0,
        121,
        144,
        96,
        255,
        22,
        129,
        86,
        91,
        96,
        64,
        81,
        144,
        21,
        21,
        129,
        82,
        96,
        32,
        1,
        91,
        96,
        64,
        81,
        128,
        145,
        3,
        144,
        243,
        91,
        97,
        0,
        161,
        97,
        0,
        156,
        54,
        96,
        4,
        97,
        1,
        215,
        86,
        91,
        97,
        1,
        38,
        86,
        91,
        96,
        64,
        81,
        97,
        0,
        133,
        146,
        145,
        144,
        97,
        2,
        25,
        86,
        91,
        97,
        0,
        238,
        97,
        0,
        189,
        54,
        96,
        4,
        97,
        2,
        125,
        86,
        91,
        96,
        0,
        128,
        84,
        127,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        0,
        22,
        145,
        21,
        21,
        145,
        144,
        145,
        23,
        144,
        85,
        86,
        91,
        0,
        91,
        97,
        0,
        248,
        96,
        4,
        129,
        86,
        91,
        96,
        64,
        81,
        96,
        255,
        144,
        145,
        22,
        129,
        82,
        96,
        32,
        1,
        97,
        0,
        133,
        86,
        91,
        97,
        0,
        121,
        97,
        1,
        24,
        54,
        96,
        4,
        97,
        2,
        166,
        86,
        91,
        96,
        0,
        84,
        96,
        255,
        22,
        148,
        147,
        80,
        80,
        80,
        80,
        86,
        91,
        96,
        64,
        128,
        81,
        96,
        1,
        128,
        130,
        82,
        129,
        131,
        1,
        144,
        146,
        82,
        96,
        96,
        145,
        96,
        0,
        145,
        130,
        145,
        96,
        32,
        128,
        131,
        1,
        144,
        128,
        54,
        131,
        55,
        1,
        144,
        80,
        80,
        144,
        80,
        96,
        0,
        129,
        96,
        0,
        129,
        81,
        129,
        16,
        97,
        1,
        98,
        87,
        97,
        1,
        98,
        97,
        3,
        18,
        86,
        91,
        115,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        144,
        146,
        22,
        96,
        32,
        146,
        131,
        2,
        145,
        144,
        145,
        1,
        144,
        145,
        1,
        82,
        145,
        80,
        96,
        1,
        144,
        80,
        91,
        146,
        80,
        146,
        144,
        80,
        86,
        91,
        96,
        0,
        128,
        131,
        96,
        31,
        132,
        1,
        18,
        97,
        1,
        167,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        129,
        53,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        129,
        17,
        21,
        97,
        1,
        191,
        87,
        96,
        0,
        128,
        253,
        91,
        96,
        32,
        131,
        1,
        145,
        80,
        131,
        96,
        32,
        130,
        133,
        1,
        1,
        17,
        21,
        97,
        1,
        142,
        87,
        96,
        0,
        128,
        253,
        91,
        96,
        0,
        128,
        96,
        32,
        131,
        133,
        3,
        18,
        21,
        97,
        1,
        234,
        87,
        96,
        0,
        128,
        253,
        91,
        130,
        53,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        129,
        17,
        21,
        97,
        2,
        1,
        87,
        96,
        0,
        128,
        253,
        91,
        97,
        2,
        13,
        133,
        130,
        134,
        1,
        97,
        1,
        149,
        86,
        91,
        144,
        150,
        144,
        149,
        80,
        147,
        80,
        80,
        80,
        80,
        86,
        91,
        96,
        64,
        128,
        130,
        82,
        131,
        81,
        144,
        130,
        1,
        129,
        144,
        82,
        96,
        0,
        144,
        96,
        32,
        144,
        96,
        96,
        132,
        1,
        144,
        130,
        135,
        1,
        132,
        91,
        130,
        129,
        16,
        21,
        97,
        2,
        104,
        87,
        129,
        81,
        115,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        22,
        132,
        82,
        146,
        132,
        1,
        146,
        144,
        132,
        1,
        144,
        96,
        1,
        1,
        97,
        2,
        54,
        86,
        91,
        80,
        80,
        80,
        96,
        255,
        148,
        144,
        148,
        22,
        146,
        1,
        145,
        144,
        145,
        82,
        80,
        145,
        144,
        80,
        86,
        91,
        96,
        0,
        96,
        32,
        130,
        132,
        3,
        18,
        21,
        97,
        2,
        143,
        87,
        96,
        0,
        128,
        253,
        91,
        129,
        53,
        128,
        21,
        21,
        129,
        20,
        97,
        2,
        159,
        87,
        96,
        0,
        128,
        253,
        91,
        147,
        146,
        80,
        80,
        80,
        86,
        91,
        96,
        0,
        128,
        96,
        0,
        128,
        96,
        64,
        133,
        135,
        3,
        18,
        21,
        97,
        2,
        188,
        87,
        96,
        0,
        128,
        253,
        91,
        132,
        53,
        103,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        255,
        128,
        130,
        17,
        21,
        97,
        2,
        212,
        87,
        96,
        0,
        128,
        253,
        91,
        97,
        2,
        224,
        136,
        131,
        137,
        1,
        97,
        1,
        149,
        86,
        91,
        144,
        150,
        80,
        148,
        80,
        96,
        32,
        135,
        1,
        53,
        145,
        80,
        128,
        130,
        17,
        21,
        97,
        2,
        249,
        87,
        96,
        0,
        128,
        253,
        91,
        80,
        97,
        3,
        6,
        135,
        130,
        136,
        1,
        97,
        1,
        149,
        86,
        91,
        149,
        152,
        148,
        151,
        80,
        149,
        80,
        80,
        80,
        80,
        86,
        91,
        127,
        78,
        72,
        123,
        113,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        96,
        0,
        82,
        96,
        50,
        96,
        4,
        82,
        96,
        36,
        96,
        0,
        253,
        254,
        162,
        100,
        105,
        112,
        102,
        115,
        88,
        34,
        18,
        32,
        210,
        88,
        248,
        63,
        220,
        83,
        252,
        141,
        58,
        96,
        229,
        14,
        55,
        230,
        212,
        114,
        10,
        233,
        243,
        115,
        201,
        119,
        233,
        143,
        196,
        40,
        153,
        27,
        99,
        206,
        52,
        194,
        100,
        115,
        111,
        108,
        99,
        67,
        0,
        8,
        17,
        0,
        51,
    ];
    ///The deployed bytecode of the contract.
    pub static TESTMULTISIGISM_DEPLOYED_BYTECODE: ::ethers::core::types::Bytes = ::ethers::core::types::Bytes::from_static(
        __DEPLOYED_BYTECODE,
    );
    pub struct TestMultisigIsm<M>(::ethers::contract::Contract<M>);
    impl<M> ::core::clone::Clone for TestMultisigIsm<M> {
        fn clone(&self) -> Self {
            Self(::core::clone::Clone::clone(&self.0))
        }
    }
    impl<M> ::core::ops::Deref for TestMultisigIsm<M> {
        type Target = ::ethers::contract::Contract<M>;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl<M> ::core::ops::DerefMut for TestMultisigIsm<M> {
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl<M> ::core::fmt::Debug for TestMultisigIsm<M> {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple(stringify!(TestMultisigIsm)).field(&self.address()).finish()
        }
    }
    impl<M: ::ethers::providers::Middleware> TestMultisigIsm<M> {
        /// Creates a new contract instance with the specified `ethers` client at
        /// `address`. The contract derefs to a `ethers::Contract` object.
        pub fn new<T: Into<::ethers::core::types::Address>>(
            address: T,
            client: ::std::sync::Arc<M>,
        ) -> Self {
            Self(
                ::ethers::contract::Contract::new(
                    address.into(),
                    TESTMULTISIGISM_ABI.clone(),
                    client,
                ),
            )
        }
        /// Constructs the general purpose `Deployer` instance based on the provided constructor arguments and sends it.
        /// Returns a new instance of a deployer that returns an instance of this contract after sending the transaction
        ///
        /// Notes:
        /// - If there are no constructor arguments, you should pass `()` as the argument.
        /// - The default poll duration is 7 seconds.
        /// - The default number of confirmations is 1 block.
        ///
        ///
        /// # Example
        ///
        /// Generate contract bindings with `abigen!` and deploy a new contract instance.
        ///
        /// *Note*: this requires a `bytecode` and `abi` object in the `greeter.json` artifact.
        ///
        /// ```ignore
        /// # async fn deploy<M: ethers::providers::Middleware>(client: ::std::sync::Arc<M>) {
        ///     abigen!(Greeter, "../greeter.json");
        ///
        ///    let greeter_contract = Greeter::deploy(client, "Hello world!".to_string()).unwrap().send().await.unwrap();
        ///    let msg = greeter_contract.greet().call().await.unwrap();
        /// # }
        /// ```
        pub fn deploy<T: ::ethers::core::abi::Tokenize>(
            client: ::std::sync::Arc<M>,
            constructor_args: T,
        ) -> ::core::result::Result<
            ::ethers::contract::builders::ContractDeployer<M, Self>,
            ::ethers::contract::ContractError<M>,
        > {
            let factory = ::ethers::contract::ContractFactory::new(
                TESTMULTISIGISM_ABI.clone(),
                TESTMULTISIGISM_BYTECODE.clone().into(),
                client,
            );
            let deployer = factory.deploy(constructor_args)?;
            let deployer = ::ethers::contract::ContractDeployer::new(deployer);
            Ok(deployer)
        }
        ///Calls the contract's `accept` (0x2852b71c) function
        pub fn accept(&self) -> ::ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([40, 82, 183, 28], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `moduleType` (0x6465e69f) function
        pub fn module_type(&self) -> ::ethers::contract::builders::ContractCall<M, u8> {
            self.0
                .method_hash([100, 101, 230, 159], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `setAccept` (0x4fc3aa7c) function
        pub fn set_accept(
            &self,
            val: bool,
        ) -> ::ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([79, 195, 170, 124], val)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `validatorsAndThreshold` (0x2e0ed234) function
        pub fn validators_and_threshold(
            &self,
            p0: ::ethers::core::types::Bytes,
        ) -> ::ethers::contract::builders::ContractCall<
            M,
            (::std::vec::Vec<::ethers::core::types::Address>, u8),
        > {
            self.0
                .method_hash([46, 14, 210, 52], p0)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `verify` (0xf7e83aee) function
        pub fn verify(
            &self,
            p0: ::ethers::core::types::Bytes,
            p1: ::ethers::core::types::Bytes,
        ) -> ::ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([247, 232, 58, 238], (p0, p1))
                .expect("method not found (this should never happen)")
        }
    }
    impl<M: ::ethers::providers::Middleware> From<::ethers::contract::Contract<M>>
    for TestMultisigIsm<M> {
        fn from(contract: ::ethers::contract::Contract<M>) -> Self {
            Self::new(contract.address(), contract.client())
        }
    }
    ///Container type for all input parameters for the `accept` function with signature `accept()` and selector `0x2852b71c`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "accept", abi = "accept()")]
    pub struct AcceptCall;
    ///Container type for all input parameters for the `moduleType` function with signature `moduleType()` and selector `0x6465e69f`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "moduleType", abi = "moduleType()")]
    pub struct ModuleTypeCall;
    ///Container type for all input parameters for the `setAccept` function with signature `setAccept(bool)` and selector `0x4fc3aa7c`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "setAccept", abi = "setAccept(bool)")]
    pub struct SetAcceptCall {
        pub val: bool,
    }
    ///Container type for all input parameters for the `validatorsAndThreshold` function with signature `validatorsAndThreshold(bytes)` and selector `0x2e0ed234`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "validatorsAndThreshold", abi = "validatorsAndThreshold(bytes)")]
    pub struct ValidatorsAndThresholdCall(pub ::ethers::core::types::Bytes);
    ///Container type for all input parameters for the `verify` function with signature `verify(bytes,bytes)` and selector `0xf7e83aee`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "verify", abi = "verify(bytes,bytes)")]
    pub struct VerifyCall(
        pub ::ethers::core::types::Bytes,
        pub ::ethers::core::types::Bytes,
    );
    ///Container type for all of the contract's call
    #[derive(Clone, ::ethers::contract::EthAbiType, Debug, PartialEq, Eq, Hash)]
    pub enum TestMultisigIsmCalls {
        Accept(AcceptCall),
        ModuleType(ModuleTypeCall),
        SetAccept(SetAcceptCall),
        ValidatorsAndThreshold(ValidatorsAndThresholdCall),
        Verify(VerifyCall),
    }
    impl ::ethers::core::abi::AbiDecode for TestMultisigIsmCalls {
        fn decode(
            data: impl AsRef<[u8]>,
        ) -> ::core::result::Result<Self, ::ethers::core::abi::AbiError> {
            let data = data.as_ref();
            if let Ok(decoded)
                = <AcceptCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::Accept(decoded));
            }
            if let Ok(decoded)
                = <ModuleTypeCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::ModuleType(decoded));
            }
            if let Ok(decoded)
                = <SetAcceptCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::SetAccept(decoded));
            }
            if let Ok(decoded)
                = <ValidatorsAndThresholdCall as ::ethers::core::abi::AbiDecode>::decode(
                    data,
                ) {
                return Ok(Self::ValidatorsAndThreshold(decoded));
            }
            if let Ok(decoded)
                = <VerifyCall as ::ethers::core::abi::AbiDecode>::decode(data) {
                return Ok(Self::Verify(decoded));
            }
            Err(::ethers::core::abi::Error::InvalidData.into())
        }
    }
    impl ::ethers::core::abi::AbiEncode for TestMultisigIsmCalls {
        fn encode(self) -> Vec<u8> {
            match self {
                Self::Accept(element) => ::ethers::core::abi::AbiEncode::encode(element),
                Self::ModuleType(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::SetAccept(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::ValidatorsAndThreshold(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::Verify(element) => ::ethers::core::abi::AbiEncode::encode(element),
            }
        }
    }
    impl ::core::fmt::Display for TestMultisigIsmCalls {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            match self {
                Self::Accept(element) => ::core::fmt::Display::fmt(element, f),
                Self::ModuleType(element) => ::core::fmt::Display::fmt(element, f),
                Self::SetAccept(element) => ::core::fmt::Display::fmt(element, f),
                Self::ValidatorsAndThreshold(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
                Self::Verify(element) => ::core::fmt::Display::fmt(element, f),
            }
        }
    }
    impl ::core::convert::From<AcceptCall> for TestMultisigIsmCalls {
        fn from(value: AcceptCall) -> Self {
            Self::Accept(value)
        }
    }
    impl ::core::convert::From<ModuleTypeCall> for TestMultisigIsmCalls {
        fn from(value: ModuleTypeCall) -> Self {
            Self::ModuleType(value)
        }
    }
    impl ::core::convert::From<SetAcceptCall> for TestMultisigIsmCalls {
        fn from(value: SetAcceptCall) -> Self {
            Self::SetAccept(value)
        }
    }
    impl ::core::convert::From<ValidatorsAndThresholdCall> for TestMultisigIsmCalls {
        fn from(value: ValidatorsAndThresholdCall) -> Self {
            Self::ValidatorsAndThreshold(value)
        }
    }
    impl ::core::convert::From<VerifyCall> for TestMultisigIsmCalls {
        fn from(value: VerifyCall) -> Self {
            Self::Verify(value)
        }
    }
    ///Container type for all return fields from the `accept` function with signature `accept()` and selector `0x2852b71c`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct AcceptReturn(pub bool);
    ///Container type for all return fields from the `moduleType` function with signature `moduleType()` and selector `0x6465e69f`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct ModuleTypeReturn(pub u8);
    ///Container type for all return fields from the `validatorsAndThreshold` function with signature `validatorsAndThreshold(bytes)` and selector `0x2e0ed234`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct ValidatorsAndThresholdReturn(
        pub ::std::vec::Vec<::ethers::core::types::Address>,
        pub u8,
    );
    ///Container type for all return fields from the `verify` function with signature `verify(bytes,bytes)` and selector `0xf7e83aee`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct VerifyReturn(pub bool);
}
