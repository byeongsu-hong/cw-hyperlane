/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.16.5.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/
import { Coin } from "@cosmjs/amino";
import { MsgExecuteContractEncodeObject } from "cosmwasm";
import { ValidatorSet, ThresholdSet } from "./IsmMultisig.types";
export interface IsmMultisigMessage {
    contractAddress: string;
    sender: string;
    enrollValidator: ({ set }: {
        set: ValidatorSet;
    }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
    enrollValidators: ({ set }: {
        set: ValidatorSet[];
    }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
    unenrollValidator: ({ domain, validator }: {
        domain: number;
        validator: string;
    }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
    setThreshold: ({ set }: {
        set: ThresholdSet;
    }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
    setThresholds: ({ set }: {
        set: ThresholdSet[];
    }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
    initTransferOwnership: ({ owner }: {
        owner: string;
    }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
    finishTransferOwnership: (funds?: Coin[]) => MsgExecuteContractEncodeObject;
    revokeTransferOwnership: (funds?: Coin[]) => MsgExecuteContractEncodeObject;
}
export declare class IsmMultisigMessageComposer implements IsmMultisigMessage {
    sender: string;
    contractAddress: string;
    constructor(sender: string, contractAddress: string);
    enrollValidator: ({ set }: {
        set: ValidatorSet;
    }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
    enrollValidators: ({ set }: {
        set: ValidatorSet[];
    }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
    unenrollValidator: ({ domain, validator }: {
        domain: number;
        validator: string;
    }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
    setThreshold: ({ set }: {
        set: ThresholdSet;
    }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
    setThresholds: ({ set }: {
        set: ThresholdSet[];
    }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
    initTransferOwnership: ({ owner }: {
        owner: string;
    }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
    finishTransferOwnership: (funds?: Coin[]) => MsgExecuteContractEncodeObject;
    revokeTransferOwnership: (funds?: Coin[]) => MsgExecuteContractEncodeObject;
}
//# sourceMappingURL=IsmMultisig.message-composer.d.ts.map