/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.16.5.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/
import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { ValidatorSet, ThresholdSet, HexBinary, ModuleTypeResponse, VerifyResponse } from "./IsmMultisig.types";
export interface IsmMultisigReadOnlyInterface {
    contractAddress: string;
    moduleType: () => Promise<ModuleTypeResponse>;
    verify: ({ message, metadata }: {
        message: HexBinary;
        metadata: HexBinary;
    }) => Promise<VerifyResponse>;
}
export declare class IsmMultisigQueryClient implements IsmMultisigReadOnlyInterface {
    client: CosmWasmClient;
    contractAddress: string;
    constructor(client: CosmWasmClient, contractAddress: string);
    moduleType: () => Promise<ModuleTypeResponse>;
    verify: ({ message, metadata }: {
        message: HexBinary;
        metadata: HexBinary;
    }) => Promise<VerifyResponse>;
}
export interface IsmMultisigInterface extends IsmMultisigReadOnlyInterface {
    contractAddress: string;
    sender: string;
    enrollValidator: ({ set }: {
        set: ValidatorSet;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    enrollValidators: ({ set }: {
        set: ValidatorSet[];
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    unenrollValidator: ({ domain, validator }: {
        domain: number;
        validator: string;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    setThreshold: ({ set }: {
        set: ThresholdSet;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    setThresholds: ({ set }: {
        set: ThresholdSet[];
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    initTransferOwnership: ({ owner }: {
        owner: string;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    finishTransferOwnership: (fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    revokeTransferOwnership: (fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
}
export declare class IsmMultisigClient extends IsmMultisigQueryClient implements IsmMultisigInterface {
    client: SigningCosmWasmClient;
    sender: string;
    contractAddress: string;
    constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string);
    enrollValidator: ({ set }: {
        set: ValidatorSet;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    enrollValidators: ({ set }: {
        set: ValidatorSet[];
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    unenrollValidator: ({ domain, validator }: {
        domain: number;
        validator: string;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    setThreshold: ({ set }: {
        set: ThresholdSet;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    setThresholds: ({ set }: {
        set: ThresholdSet[];
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    initTransferOwnership: ({ owner }: {
        owner: string;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    finishTransferOwnership: (fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    revokeTransferOwnership: (fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
}
//# sourceMappingURL=IsmMultisig.client.d.ts.map