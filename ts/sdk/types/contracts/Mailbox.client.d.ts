/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.16.5.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/
import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { HexBinary, CheckPointResponse, CountResponse, NonceResponse, PausedResponse, RootResponse } from "./Mailbox.types";
export interface MailboxReadOnlyInterface {
    contractAddress: string;
    root: () => Promise<RootResponse>;
    count: () => Promise<CountResponse>;
    checkPoint: () => Promise<CheckPointResponse>;
    paused: () => Promise<PausedResponse>;
    nonce: () => Promise<NonceResponse>;
}
export declare class MailboxQueryClient implements MailboxReadOnlyInterface {
    client: CosmWasmClient;
    contractAddress: string;
    constructor(client: CosmWasmClient, contractAddress: string);
    root: () => Promise<RootResponse>;
    count: () => Promise<CountResponse>;
    checkPoint: () => Promise<CheckPointResponse>;
    paused: () => Promise<PausedResponse>;
    nonce: () => Promise<NonceResponse>;
}
export interface MailboxInterface extends MailboxReadOnlyInterface {
    contractAddress: string;
    sender: string;
    pause: (fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    unpause: (fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    setDefaultISM: ({ ism }: {
        ism: string;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    dispatch: ({ destDomain, msgBody, recipientAddr }: {
        destDomain: number;
        msgBody: HexBinary;
        recipientAddr: HexBinary;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    process: ({ message, metadata }: {
        message: HexBinary;
        metadata: HexBinary;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
}
export declare class MailboxClient extends MailboxQueryClient implements MailboxInterface {
    client: SigningCosmWasmClient;
    sender: string;
    contractAddress: string;
    constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string);
    pause: (fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    unpause: (fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    setDefaultISM: ({ ism }: {
        ism: string;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    dispatch: ({ destDomain, msgBody, recipientAddr }: {
        destDomain: number;
        msgBody: HexBinary;
        recipientAddr: HexBinary;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    process: ({ message, metadata }: {
        message: HexBinary;
        metadata: HexBinary;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
}
//# sourceMappingURL=Mailbox.client.d.ts.map