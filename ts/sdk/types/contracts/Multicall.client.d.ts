/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.16.5.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/
import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee } from "@cosmjs/amino";
import { CosmosMsgForEmpty, HexBinary, Coin, StaticCall, AggregateResponse } from "./Multicall.types";
export interface MulticallReadOnlyInterface {
    contractAddress: string;
    aggregateStatic: ({ req }: {
        req: StaticCall[];
    }) => Promise<AggregateResponse>;
}
export declare class MulticallQueryClient implements MulticallReadOnlyInterface {
    client: CosmWasmClient;
    contractAddress: string;
    constructor(client: CosmWasmClient, contractAddress: string);
    aggregateStatic: ({ req }: {
        req: StaticCall[];
    }) => Promise<AggregateResponse>;
}
export interface MulticallInterface extends MulticallReadOnlyInterface {
    contractAddress: string;
    sender: string;
    aggregate: ({ req }: {
        req: CosmosMsgForEmpty[];
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    handle: ({ body, origin, sender }: {
        body: HexBinary;
        origin: number;
        sender: HexBinary;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
}
export declare class MulticallClient extends MulticallQueryClient implements MulticallInterface {
    client: SigningCosmWasmClient;
    sender: string;
    contractAddress: string;
    constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string);
    aggregate: ({ req }: {
        req: CosmosMsgForEmpty[];
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    handle: ({ body, origin, sender }: {
        body: HexBinary;
        origin: number;
        sender: HexBinary;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
}
//# sourceMappingURL=Multicall.client.d.ts.map