/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.35.3.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

export type TokenModeMsgForNativeModeBrigedAndNativeModeCollateral = {
  bridged: NativeModeBriged;
} | {
  collateral: NativeModeCollateral;
};
export interface InstantiateMsg {
  hrp: string;
  mailbox: string;
  owner: string;
  token: TokenModeMsgForNativeModeBrigedAndNativeModeCollateral;
}
export interface NativeModeBriged {
  denom: string;
  metadata?: Metadata | null;
}
export interface Metadata {
  base: string;
  denom_units: DenomUnit[];
  description: string;
  display: string;
  name: string;
  symbol: string;
}
export interface DenomUnit {
  aliases: string[];
  denom: string;
  exponent: number;
}
export interface NativeModeCollateral {
  denom: string;
}
export type ExecuteMsg = {
  ownable: OwnableMsg;
} | {
  router: RouterMsgForHexBinary;
} | {
  handle: HandleMsg;
} | {
  transfer_remote: {
    dest_domain: number;
    recipient: HexBinary;
  };
};
export type OwnableMsg = {
  init_ownership_transfer: {
    next_owner: string;
  };
} | {
  revoke_ownership_transfer: {};
} | {
  claim_ownership: {};
};
export type RouterMsgForHexBinary = {
  set_route: {
    set: DomainRouteSetForHexBinary;
  };
} | {
  set_routes: {
    set: DomainRouteSetForHexBinary[];
  };
};
export type HexBinary = string;
export interface DomainRouteSetForHexBinary {
  domain: number;
  route?: HexBinary | null;
}
export interface HandleMsg {
  body: HexBinary;
  origin: number;
  sender: HexBinary;
}
export type QueryMsg = {
  ownable: OwnableQueryMsg;
} | {
  router: RouterQueryForHexBinary;
} | {
  token_default: TokenWarpDefaultQueryMsg;
};
export type OwnableQueryMsg = {
  get_owner: {};
} | {
  get_pending_owner: {};
};
export type RouterQueryForHexBinary = {
  domains: {};
} | {
  get_route: {
    domain: number;
  };
} | {
  list_routes: {
    limit?: number | null;
    offset?: number | null;
    order?: Order | null;
  };
};
export type Order = "asc" | "desc";
export type TokenWarpDefaultQueryMsg = {
  token_type: {};
} | {
  token_mode: {};
};
export interface DomainsResponse {
  domains: number[];
}
export type Addr = string;
export interface OwnerResponse {
  owner: Addr;
}
export interface PendingOwnerResponse {
  pending_owner?: Addr | null;
}
export interface RouteResponseForHexBinary {
  route: DomainRouteSetForHexBinary;
}
export interface RoutesResponseForHexBinary {
  routes: DomainRouteSetForHexBinary[];
}
export interface Empty {
  [k: string]: unknown;
}
export type TokenMode = "bridged" | "collateral";
export interface TokenModeResponse {
  mode: TokenMode;
}
export type TokenType = {
  native: TokenTypeNative;
} | {
  c_w20: {
    contract: string;
  };
} | {
  c_w721: {
    contract: string;
  };
};
export type TokenTypeNative = {
  fungible: {
    denom: string;
  };
} | {
  non_fungible: {
    class: string;
  };
};
export interface TokenTypeResponse {
  type: TokenType;
}