/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.35.3.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { Coin } from "@cosmjs/amino";
import { MsgExecuteContractEncodeObject } from "@cosmjs/cosmwasm-stargate";
import { MsgExecuteContract } from "cosmjs-types/cosmwasm/wasm/v1/tx";
import { toUtf8 } from "@cosmjs/encoding";
import { TokenModeMsgForNativeModeBrigedAndNativeModeCollateral, InstantiateMsg, NativeModeBriged, Metadata, DenomUnit, NativeModeCollateral, ExecuteMsg, OwnableMsg, RouterMsgForHexBinary, HexBinary, DomainRouteSetForHexBinary, HandleMsg, QueryMsg, OwnableQueryMsg, RouterQueryForHexBinary, Order, TokenWarpDefaultQueryMsg, DomainsResponse, Addr, OwnerResponse, PendingOwnerResponse, RouteResponseForHexBinary, RoutesResponseForHexBinary, Empty, TokenMode, TokenModeResponse, TokenType, TokenTypeNative, TokenTypeResponse } from "./WarpNative.types";
export interface WarpNativeMsg {
  contractAddress: string;
  sender: string;
  ownable: (ownableMsg: OwnableMsg, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  router: (routerMsgForHexBinary: RouterMsgForHexBinary, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  handle: ({
    body,
    origin,
    sender
  }: {
    body: HexBinary;
    origin: number;
    sender: HexBinary;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  transferRemote: ({
    destDomain,
    recipient
  }: {
    destDomain: number;
    recipient: HexBinary;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
}
export class WarpNativeMsgComposer implements WarpNativeMsg {
  sender: string;
  contractAddress: string;

  constructor(sender: string, contractAddress: string) {
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.ownable = this.ownable.bind(this);
    this.router = this.router.bind(this);
    this.handle = this.handle.bind(this);
    this.transferRemote = this.transferRemote.bind(this);
  }

  ownable = (ownableMsg: OwnableMsg, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          ownable: ownableMsg
        })),
        funds: _funds
      })
    };
  };
  router = (routerMsgForHexBinary: RouterMsgForHexBinary, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          router: routerMsgForHexBinary
        })),
        funds: _funds
      })
    };
  };
  handle = ({
    body,
    origin,
    sender
  }: {
    body: HexBinary;
    origin: number;
    sender: HexBinary;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          handle: {
            body,
            origin,
            sender
          }
        })),
        funds: _funds
      })
    };
  };
  transferRemote = ({
    destDomain,
    recipient
  }: {
    destDomain: number;
    recipient: HexBinary;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          transfer_remote: {
            dest_domain: destDomain,
            recipient
          }
        })),
        funds: _funds
      })
    };
  };
}