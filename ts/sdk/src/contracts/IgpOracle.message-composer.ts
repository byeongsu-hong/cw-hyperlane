/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.35.3.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { Coin } from "@cosmjs/amino";
import { MsgExecuteContractEncodeObject } from "@cosmjs/cosmwasm-stargate";
import { MsgExecuteContract } from "cosmjs-types/cosmwasm/wasm/v1/tx";
import { toUtf8 } from "@cosmjs/encoding";
import { InstantiateMsg, ExecuteMsg, OwnableMsg, Uint128, RemoteGasDataConfig, QueryMsg, OwnableQueryMsg, IgpGasOracleQueryMsg, GetExchangeRateAndGasPriceResponse, Addr, OwnerResponse, PendingOwnerResponse } from "./IgpOracle.types";
export interface IgpOracleMsg {
  contractAddress: string;
  sender: string;
  ownership: (ownableMsg: OwnableMsg, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  setRemoteGasDataConfigs: ({
    configs
  }: {
    configs: RemoteGasDataConfig[];
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  setRemoteGasData: ({
    config
  }: {
    config: RemoteGasDataConfig;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
}
export class IgpOracleMsgComposer implements IgpOracleMsg {
  sender: string;
  contractAddress: string;

  constructor(sender: string, contractAddress: string) {
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.ownership = this.ownership.bind(this);
    this.setRemoteGasDataConfigs = this.setRemoteGasDataConfigs.bind(this);
    this.setRemoteGasData = this.setRemoteGasData.bind(this);
  }

  ownership = (ownableMsg: OwnableMsg, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          ownership: ownableMsg
        })),
        funds: _funds
      })
    };
  };
  setRemoteGasDataConfigs = ({
    configs
  }: {
    configs: RemoteGasDataConfig[];
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          set_remote_gas_data_configs: {
            configs
          }
        })),
        funds: _funds
      })
    };
  };
  setRemoteGasData = ({
    config
  }: {
    config: RemoteGasDataConfig;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          set_remote_gas_data: {
            config
          }
        })),
        funds: _funds
      })
    };
  };
}