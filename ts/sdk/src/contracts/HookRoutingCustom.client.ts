/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.35.3.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee } from "@cosmjs/amino";
import { InstantiateMsg, ExecuteMsg, OwnableMsg, HexBinary, RouterMsgForAddr, Addr, PostDispatchMsg, DomainRouteSetForAddr, RegisterCustomHookMsg, ClearCustomHookMsg, QueryMsg, OwnableQueryMsg, RouterQueryForAddr, Order, HookQueryMsg, CustomRoutingHookQueryMsg, QuoteDispatchMsg, CustomHookResponse, CustomHooksResponse, DomainsResponse, OwnerResponse, PendingOwnerResponse, RouteResponseForAddr, RoutesResponseForAddr, MailboxResponse, Empty, Uint128, QuoteDispatchResponse, Coin } from "./HookRoutingCustom.types";
export interface HookRoutingCustomReadOnlyInterface {
  contractAddress: string;
  ownable: (ownableQueryMsg: OwnableQueryMsg) => Promise<OwnableResponse>;
  router: (routerQueryForAddr: RouterQueryForAddr) => Promise<RouterResponse>;
  hook: (hookQueryMsg: HookQueryMsg) => Promise<HookResponse>;
  customRoutingHook: (customRoutingHookQueryMsg: CustomRoutingHookQueryMsg) => Promise<CustomRoutingHookResponse>;
}
export class HookRoutingCustomQueryClient implements HookRoutingCustomReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.ownable = this.ownable.bind(this);
    this.router = this.router.bind(this);
    this.hook = this.hook.bind(this);
    this.customRoutingHook = this.customRoutingHook.bind(this);
  }

  ownable = async (ownableQueryMsg: OwnableQueryMsg): Promise<OwnableResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      ownable: ownableQueryMsg
    });
  };
  router = async (routerQueryForAddr: RouterQueryForAddr): Promise<RouterResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      router: routerQueryForAddr
    });
  };
  hook = async (hookQueryMsg: HookQueryMsg): Promise<HookResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      hook: hookQueryMsg
    });
  };
  customRoutingHook = async (customRoutingHookQueryMsg: CustomRoutingHookQueryMsg): Promise<CustomRoutingHookResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      custom_routing_hook: customRoutingHookQueryMsg
    });
  };
}
export interface HookRoutingCustomInterface extends HookRoutingCustomReadOnlyInterface {
  contractAddress: string;
  sender: string;
  ownable: (ownableMsg: OwnableMsg, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  postDispatch: ({
    message,
    metadata
  }: {
    message: HexBinary;
    metadata: HexBinary;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  router: (routerMsgForAddr: RouterMsgForAddr, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  registerCustomHook: ({
    destDomain,
    hook,
    recipient
  }: {
    destDomain: number;
    hook: string;
    recipient: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  registerCustomHooks: (fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  clearCustomHook: ({
    destDomain,
    recipient
  }: {
    destDomain: number;
    recipient: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  clearCustomHooks: (fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
export class HookRoutingCustomClient extends HookRoutingCustomQueryClient implements HookRoutingCustomInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.ownable = this.ownable.bind(this);
    this.postDispatch = this.postDispatch.bind(this);
    this.router = this.router.bind(this);
    this.registerCustomHook = this.registerCustomHook.bind(this);
    this.registerCustomHooks = this.registerCustomHooks.bind(this);
    this.clearCustomHook = this.clearCustomHook.bind(this);
    this.clearCustomHooks = this.clearCustomHooks.bind(this);
  }

  ownable = async (ownableMsg: OwnableMsg, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      ownable: ownableMsg
    }, fee, memo, _funds);
  };
  postDispatch = async ({
    message,
    metadata
  }: {
    message: HexBinary;
    metadata: HexBinary;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      post_dispatch: {
        message,
        metadata
      }
    }, fee, memo, _funds);
  };
  router = async (routerMsgForAddr: RouterMsgForAddr, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      router: routerMsgForAddr
    }, fee, memo, _funds);
  };
  registerCustomHook = async ({
    destDomain,
    hook,
    recipient
  }: {
    destDomain: number;
    hook: string;
    recipient: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      register_custom_hook: {
        dest_domain: destDomain,
        hook,
        recipient
      }
    }, fee, memo, _funds);
  };
  registerCustomHooks = async (fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      register_custom_hooks: {}
    }, fee, memo, _funds);
  };
  clearCustomHook = async ({
    destDomain,
    recipient
  }: {
    destDomain: number;
    recipient: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      clear_custom_hook: {
        dest_domain: destDomain,
        recipient
      }
    }, fee, memo, _funds);
  };
  clearCustomHooks = async (fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      clear_custom_hooks: {}
    }, fee, memo, _funds);
  };
}