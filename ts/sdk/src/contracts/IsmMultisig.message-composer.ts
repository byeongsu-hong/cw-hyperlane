/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.16.5.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { Coin } from "@cosmjs/amino";
import { MsgExecuteContractEncodeObject } from "cosmwasm";
import { MsgExecuteContract } from "cosmjs-types/cosmwasm/wasm/v1/tx";
import { toUtf8 } from "@cosmjs/encoding";
import { InstantiateMsg, ExecuteMsg, Binary, ValidatorSet, ThresholdSet, QueryMsg, HexBinary, MigrateMsg, ISMType, ModuleTypeResponse, VerifyResponse } from "./IsmMultisig.types";
export interface IsmMultisigMessage {
  contractAddress: string;
  sender: string;
  enrollValidator: ({
    set
  }: {
    set: ValidatorSet;
  }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
  enrollValidators: ({
    set
  }: {
    set: ValidatorSet[];
  }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
  unenrollValidator: ({
    domain,
    validator
  }: {
    domain: number;
    validator: string;
  }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
  setThreshold: ({
    set
  }: {
    set: ThresholdSet;
  }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
  setThresholds: ({
    set
  }: {
    set: ThresholdSet[];
  }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
  initTransferOwnership: ({
    owner
  }: {
    owner: string;
  }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
  finishTransferOwnership: (funds?: Coin[]) => MsgExecuteContractEncodeObject;
  revokeTransferOwnership: (funds?: Coin[]) => MsgExecuteContractEncodeObject;
}
export class IsmMultisigMessageComposer implements IsmMultisigMessage {
  sender: string;
  contractAddress: string;

  constructor(sender: string, contractAddress: string) {
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.enrollValidator = this.enrollValidator.bind(this);
    this.enrollValidators = this.enrollValidators.bind(this);
    this.unenrollValidator = this.unenrollValidator.bind(this);
    this.setThreshold = this.setThreshold.bind(this);
    this.setThresholds = this.setThresholds.bind(this);
    this.initTransferOwnership = this.initTransferOwnership.bind(this);
    this.finishTransferOwnership = this.finishTransferOwnership.bind(this);
    this.revokeTransferOwnership = this.revokeTransferOwnership.bind(this);
  }

  enrollValidator = ({
    set
  }: {
    set: ValidatorSet;
  }, funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          enroll_validator: {
            set
          }
        })),
        funds
      })
    };
  };
  enrollValidators = ({
    set
  }: {
    set: ValidatorSet[];
  }, funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          enroll_validators: {
            set
          }
        })),
        funds
      })
    };
  };
  unenrollValidator = ({
    domain,
    validator
  }: {
    domain: number;
    validator: string;
  }, funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          unenroll_validator: {
            domain,
            validator
          }
        })),
        funds
      })
    };
  };
  setThreshold = ({
    set
  }: {
    set: ThresholdSet;
  }, funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          set_threshold: {
            set
          }
        })),
        funds
      })
    };
  };
  setThresholds = ({
    set
  }: {
    set: ThresholdSet[];
  }, funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          set_thresholds: {
            set
          }
        })),
        funds
      })
    };
  };
  initTransferOwnership = ({
    owner
  }: {
    owner: string;
  }, funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          init_transfer_ownership: {
            owner
          }
        })),
        funds
      })
    };
  };
  finishTransferOwnership = (funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          finish_transfer_ownership: {}
        })),
        funds
      })
    };
  };
  revokeTransferOwnership = (funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          revoke_transfer_ownership: {}
        })),
        funds
      })
    };
  };
}