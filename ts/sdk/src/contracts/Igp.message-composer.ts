/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.35.3.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { MsgExecuteContractEncodeObject } from "@cosmjs/cosmwasm-stargate";
import { MsgExecuteContract } from "cosmjs-types/cosmwasm/wasm/v1/tx";
import { toUtf8 } from "@cosmjs/encoding";
import { InstantiateMsg, ExecuteMsg, OwnableMsg, RouterMsgForAddr, Addr, HexBinary, Uint256, DomainRouteSetForAddr, PostDispatchMsg, QueryMsg, OwnableQueryMsg, HookQueryMsg, RouterQueryForAddr, Order, IgpGasOracleQueryMsg, IgpQueryMsg, QuoteDispatchMsg, BeneficiaryResponse, DomainsResponse, Uint128, GetExchangeRateAndGasPriceResponse, OwnerResponse, PendingOwnerResponse, RouteResponseForAddr, RoutesResponseForAddr, MailboxResponse, Empty, QuoteDispatchResponse, Coin, QuoteGasPaymentResponse } from "./Igp.types";
export interface IgpMsg {
  contractAddress: string;
  sender: string;
  ownable: (ownableMsg: OwnableMsg, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  router: (routerMsgForAddr: RouterMsgForAddr, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  postDispatch: ({
    message,
    metadata
  }: {
    message: HexBinary;
    metadata: HexBinary;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  setBeneficiary: ({
    beneficiary
  }: {
    beneficiary: string;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  payForGas: ({
    destDomain,
    gasAmount,
    messageId,
    refundAddress
  }: {
    destDomain: number;
    gasAmount: Uint256;
    messageId: HexBinary;
    refundAddress: string;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  claim: (_funds?: Coin[]) => MsgExecuteContractEncodeObject;
}
export class IgpMsgComposer implements IgpMsg {
  sender: string;
  contractAddress: string;

  constructor(sender: string, contractAddress: string) {
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.ownable = this.ownable.bind(this);
    this.router = this.router.bind(this);
    this.postDispatch = this.postDispatch.bind(this);
    this.setBeneficiary = this.setBeneficiary.bind(this);
    this.payForGas = this.payForGas.bind(this);
    this.claim = this.claim.bind(this);
  }

  ownable = (ownableMsg: OwnableMsg, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          ownable: ownableMsg
        })),
        funds: _funds
      })
    };
  };
  router = (routerMsgForAddr: RouterMsgForAddr, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          router: routerMsgForAddr
        })),
        funds: _funds
      })
    };
  };
  postDispatch = ({
    message,
    metadata
  }: {
    message: HexBinary;
    metadata: HexBinary;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          post_dispatch: {
            message,
            metadata
          }
        })),
        funds: _funds
      })
    };
  };
  setBeneficiary = ({
    beneficiary
  }: {
    beneficiary: string;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          set_beneficiary: {
            beneficiary
          }
        })),
        funds: _funds
      })
    };
  };
  payForGas = ({
    destDomain,
    gasAmount,
    messageId,
    refundAddress
  }: {
    destDomain: number;
    gasAmount: Uint256;
    messageId: HexBinary;
    refundAddress: string;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          pay_for_gas: {
            dest_domain: destDomain,
            gas_amount: gasAmount,
            message_id: messageId,
            refund_address: refundAddress
          }
        })),
        funds: _funds
      })
    };
  };
  claim = (_funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          claim: {}
        })),
        funds: _funds
      })
    };
  };
}