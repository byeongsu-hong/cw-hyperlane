/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.16.5.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { MsgExecuteContractEncodeObject } from "cosmwasm";
import { MsgExecuteContract } from "cosmjs-types/cosmwasm/wasm/v1/tx";
import { toUtf8 } from "@cosmjs/encoding";
import { InstantiateMsg, ExecuteMsg, CosmosMsgForEmpty, BankMsg, Uint128, StakingMsg, DistributionMsg, Binary, IbcMsg, Timestamp, Uint64, WasmMsg, GovMsg, VoteOption, HexBinary, Coin, Empty, IbcTimeout, IbcTimeoutBlock, HandleMsg, QueryMsg, StaticCall, MigrateMsg, AggregateResponse } from "./Multicall.types";
export interface MulticallMessage {
  contractAddress: string;
  sender: string;
  aggregate: ({
    req
  }: {
    req: CosmosMsgForEmpty[];
  }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
  handle: ({
    body,
    origin,
    sender
  }: {
    body: HexBinary;
    origin: number;
    sender: HexBinary;
  }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
}
export class MulticallMessageComposer implements MulticallMessage {
  sender: string;
  contractAddress: string;

  constructor(sender: string, contractAddress: string) {
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.aggregate = this.aggregate.bind(this);
    this.handle = this.handle.bind(this);
  }

  aggregate = ({
    req
  }: {
    req: CosmosMsgForEmpty[];
  }, funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          aggregate: {
            req
          }
        })),
        funds
      })
    };
  };
  handle = ({
    body,
    origin,
    sender
  }: {
    body: HexBinary;
    origin: number;
    sender: HexBinary;
  }, funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          handle: {
            body,
            origin,
            sender
          }
        })),
        funds
      })
    };
  };
}