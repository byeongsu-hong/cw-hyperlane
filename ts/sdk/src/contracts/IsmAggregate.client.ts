/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.35.3.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { InstantiateMsg, ExecuteMsg, OwnableMsg, QueryMsg, OwnableQueryMsg, IsmQueryMsg, HexBinary, Addr, OwnerResponse, PendingOwnerResponse, IsmType, ModuleTypeResponse, VerifyResponse, VerifyInfoResponse } from "./IsmAggregate.types";
export interface IsmAggregateReadOnlyInterface {
  contractAddress: string;
  ownable: (ownableQueryMsg: OwnableQueryMsg) => Promise<OwnableResponse>;
  ism: (ismQueryMsg: IsmQueryMsg) => Promise<IsmResponse>;
}
export class IsmAggregateQueryClient implements IsmAggregateReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.ownable = this.ownable.bind(this);
    this.ism = this.ism.bind(this);
  }

  ownable = async (ownableQueryMsg: OwnableQueryMsg): Promise<OwnableResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      ownable: ownableQueryMsg
    });
  };
  ism = async (ismQueryMsg: IsmQueryMsg): Promise<IsmResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      ism: ismQueryMsg
    });
  };
}
export interface IsmAggregateInterface extends IsmAggregateReadOnlyInterface {
  contractAddress: string;
  sender: string;
  ownable: (ownableMsg: OwnableMsg, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  setIsms: ({
    isms
  }: {
    isms: string[];
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
export class IsmAggregateClient extends IsmAggregateQueryClient implements IsmAggregateInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.ownable = this.ownable.bind(this);
    this.setIsms = this.setIsms.bind(this);
  }

  ownable = async (ownableMsg: OwnableMsg, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      ownable: ownableMsg
    }, fee, memo, _funds);
  };
  setIsms = async ({
    isms
  }: {
    isms: string[];
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      set_isms: {
        isms
      }
    }, fee, memo, _funds);
  };
}