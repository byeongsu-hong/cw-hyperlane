/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.35.3.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { InstantiateMsg, ExecuteMsg, HexBinary, QueryMsg, GetAnnounceStorageLocationsResponse, GetAnnouncedValidatorsResponse } from "./ValidatorAnnounce.types";
export interface ValidatorAnnounceReadOnlyInterface {
  contractAddress: string;
  getAnnounceStorageLocations: ({
    validators
  }: {
    validators: HexBinary[];
  }) => Promise<GetAnnounceStorageLocationsResponse>;
  getAnnouncedValidators: () => Promise<GetAnnouncedValidatorsResponse>;
}
export class ValidatorAnnounceQueryClient implements ValidatorAnnounceReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.getAnnounceStorageLocations = this.getAnnounceStorageLocations.bind(this);
    this.getAnnouncedValidators = this.getAnnouncedValidators.bind(this);
  }

  getAnnounceStorageLocations = async ({
    validators
  }: {
    validators: HexBinary[];
  }): Promise<GetAnnounceStorageLocationsResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_announce_storage_locations: {
        validators
      }
    });
  };
  getAnnouncedValidators = async (): Promise<GetAnnouncedValidatorsResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_announced_validators: {}
    });
  };
}
export interface ValidatorAnnounceInterface extends ValidatorAnnounceReadOnlyInterface {
  contractAddress: string;
  sender: string;
  announce: ({
    signature,
    storageLocation,
    validator
  }: {
    signature: HexBinary;
    storageLocation: string;
    validator: HexBinary;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
export class ValidatorAnnounceClient extends ValidatorAnnounceQueryClient implements ValidatorAnnounceInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.announce = this.announce.bind(this);
  }

  announce = async ({
    signature,
    storageLocation,
    validator
  }: {
    signature: HexBinary;
    storageLocation: string;
    validator: HexBinary;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      announce: {
        signature,
        storage_location: storageLocation,
        validator
      }
    }, fee, memo, _funds);
  };
}