/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.35.3.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { MsgExecuteContractEncodeObject } from "@cosmjs/cosmwasm-stargate";
import { MsgExecuteContract } from "cosmjs-types/cosmwasm/wasm/v1/tx";
import { toUtf8 } from "@cosmjs/encoding";
import { InstantiateMsg, ExecuteMsg, OwnableMsg, HexBinary, RouterMsgForAddr, Addr, PostDispatchMsg, DomainRouteSetForAddr, RegisterCustomHookMsg, ClearCustomHookMsg, QueryMsg, OwnableQueryMsg, RouterQueryForAddr, Order, HookQueryMsg, CustomRoutingHookQueryMsg, QuoteDispatchMsg, CustomHookResponse, CustomHooksResponse, DomainsResponse, OwnerResponse, PendingOwnerResponse, RouteResponseForAddr, RoutesResponseForAddr, MailboxResponse, Empty, Uint128, QuoteDispatchResponse, Coin } from "./HookRoutingCustom.types";
export interface HookRoutingCustomMsg {
  contractAddress: string;
  sender: string;
  ownable: (ownableMsg: OwnableMsg, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  postDispatch: ({
    message,
    metadata
  }: {
    message: HexBinary;
    metadata: HexBinary;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  router: (routerMsgForAddr: RouterMsgForAddr, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  registerCustomHook: ({
    destDomain,
    hook,
    recipient
  }: {
    destDomain: number;
    hook: string;
    recipient: string;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  registerCustomHooks: (_funds?: Coin[]) => MsgExecuteContractEncodeObject;
  clearCustomHook: ({
    destDomain,
    recipient
  }: {
    destDomain: number;
    recipient: string;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  clearCustomHooks: (_funds?: Coin[]) => MsgExecuteContractEncodeObject;
}
export class HookRoutingCustomMsgComposer implements HookRoutingCustomMsg {
  sender: string;
  contractAddress: string;

  constructor(sender: string, contractAddress: string) {
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.ownable = this.ownable.bind(this);
    this.postDispatch = this.postDispatch.bind(this);
    this.router = this.router.bind(this);
    this.registerCustomHook = this.registerCustomHook.bind(this);
    this.registerCustomHooks = this.registerCustomHooks.bind(this);
    this.clearCustomHook = this.clearCustomHook.bind(this);
    this.clearCustomHooks = this.clearCustomHooks.bind(this);
  }

  ownable = (ownableMsg: OwnableMsg, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          ownable: ownableMsg
        })),
        funds: _funds
      })
    };
  };
  postDispatch = ({
    message,
    metadata
  }: {
    message: HexBinary;
    metadata: HexBinary;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          post_dispatch: {
            message,
            metadata
          }
        })),
        funds: _funds
      })
    };
  };
  router = (routerMsgForAddr: RouterMsgForAddr, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          router: routerMsgForAddr
        })),
        funds: _funds
      })
    };
  };
  registerCustomHook = ({
    destDomain,
    hook,
    recipient
  }: {
    destDomain: number;
    hook: string;
    recipient: string;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          register_custom_hook: {
            dest_domain: destDomain,
            hook,
            recipient
          }
        })),
        funds: _funds
      })
    };
  };
  registerCustomHooks = (_funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          register_custom_hooks: {}
        })),
        funds: _funds
      })
    };
  };
  clearCustomHook = ({
    destDomain,
    recipient
  }: {
    destDomain: number;
    recipient: string;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          clear_custom_hook: {
            dest_domain: destDomain,
            recipient
          }
        })),
        funds: _funds
      })
    };
  };
  clearCustomHooks = (_funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          clear_custom_hooks: {}
        })),
        funds: _funds
      })
    };
  };
}