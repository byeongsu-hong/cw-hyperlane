/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.16.5.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { InstantiateMsg, ExecuteMsg, HexBinary, QueryMsg, MigrateMsg, CheckPointResponse, CountResponse, NonceResponse, PausedResponse, RootResponse } from "./Mailbox.types";
export interface MailboxReadOnlyInterface {
  contractAddress: string;
  root: () => Promise<RootResponse>;
  count: () => Promise<CountResponse>;
  checkPoint: () => Promise<CheckPointResponse>;
  paused: () => Promise<PausedResponse>;
  nonce: () => Promise<NonceResponse>;
}
export class MailboxQueryClient implements MailboxReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.root = this.root.bind(this);
    this.count = this.count.bind(this);
    this.checkPoint = this.checkPoint.bind(this);
    this.paused = this.paused.bind(this);
    this.nonce = this.nonce.bind(this);
  }

  root = async (): Promise<RootResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      root: {}
    });
  };
  count = async (): Promise<CountResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      count: {}
    });
  };
  checkPoint = async (): Promise<CheckPointResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      check_point: {}
    });
  };
  paused = async (): Promise<PausedResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      paused: {}
    });
  };
  nonce = async (): Promise<NonceResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      nonce: {}
    });
  };
}
export interface MailboxInterface extends MailboxReadOnlyInterface {
  contractAddress: string;
  sender: string;
  pause: (fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  unpause: (fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  setDefaultISM: ({
    ism
  }: {
    ism: string;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  dispatch: ({
    destDomain,
    msgBody,
    recipientAddr
  }: {
    destDomain: number;
    msgBody: HexBinary;
    recipientAddr: HexBinary;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  process: ({
    message,
    metadata
  }: {
    message: HexBinary;
    metadata: HexBinary;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
}
export class MailboxClient extends MailboxQueryClient implements MailboxInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.pause = this.pause.bind(this);
    this.unpause = this.unpause.bind(this);
    this.setDefaultISM = this.setDefaultISM.bind(this);
    this.dispatch = this.dispatch.bind(this);
    this.process = this.process.bind(this);
  }

  pause = async (fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      pause: {}
    }, fee, memo, funds);
  };
  unpause = async (fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      unpause: {}
    }, fee, memo, funds);
  };
  setDefaultISM = async ({
    ism
  }: {
    ism: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      set_default_i_s_m: {
        ism
      }
    }, fee, memo, funds);
  };
  dispatch = async ({
    destDomain,
    msgBody,
    recipientAddr
  }: {
    destDomain: number;
    msgBody: HexBinary;
    recipientAddr: HexBinary;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      dispatch: {
        dest_domain: destDomain,
        msg_body: msgBody,
        recipient_addr: recipientAddr
      }
    }, fee, memo, funds);
  };
  process = async ({
    message,
    metadata
  }: {
    message: HexBinary;
    metadata: HexBinary;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      process: {
        message,
        metadata
      }
    }, fee, memo, funds);
  };
}