/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.35.3.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee } from "@cosmjs/amino";
import { InstantiateMsg, ExecuteMsg, OwnableMsg, HexBinary, DispatchMsg, QueryMsg, OwnableQueryMsg, MailboxHookQueryMsg, MailboxQueryMsg, DefaultHookResponse, DefaultIsmResponse, Addr, OwnerResponse, PendingOwnerResponse, HrpResponse, LatestDispatchedIdResponse, LocalDomainResponse, MessageDeliveredResponse, NonceResponse, Uint128, QuoteDispatchResponse, Coin, RecipientIsmResponse, RequiredHookResponse } from "./Mailbox.types";
export interface MailboxReadOnlyInterface {
  contractAddress: string;
  ownable: (ownableQueryMsg: OwnableQueryMsg) => Promise<OwnableResponse>;
  hook: (mailboxHookQueryMsg: MailboxHookQueryMsg) => Promise<HookResponse>;
  mailbox: (mailboxQueryMsg: MailboxQueryMsg) => Promise<MailboxResponse>;
}
export class MailboxQueryClient implements MailboxReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.ownable = this.ownable.bind(this);
    this.hook = this.hook.bind(this);
    this.mailbox = this.mailbox.bind(this);
  }

  ownable = async (ownableQueryMsg: OwnableQueryMsg): Promise<OwnableResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      ownable: ownableQueryMsg
    });
  };
  hook = async (mailboxHookQueryMsg: MailboxHookQueryMsg): Promise<HookResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      hook: mailboxHookQueryMsg
    });
  };
  mailbox = async (mailboxQueryMsg: MailboxQueryMsg): Promise<MailboxResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      mailbox: mailboxQueryMsg
    });
  };
}
export interface MailboxInterface extends MailboxReadOnlyInterface {
  contractAddress: string;
  sender: string;
  ownable: (ownableMsg: OwnableMsg, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  setDefaultIsm: ({
    ism
  }: {
    ism: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  setDefaultHook: ({
    hook
  }: {
    hook: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  setRequiredHook: ({
    hook
  }: {
    hook: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  dispatch: ({
    destDomain,
    hook,
    metadata,
    msgBody,
    recipientAddr
  }: {
    destDomain: number;
    hook?: string;
    metadata?: HexBinary;
    msgBody: HexBinary;
    recipientAddr: HexBinary;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  process: ({
    message,
    metadata
  }: {
    message: HexBinary;
    metadata: HexBinary;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
export class MailboxClient extends MailboxQueryClient implements MailboxInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.ownable = this.ownable.bind(this);
    this.setDefaultIsm = this.setDefaultIsm.bind(this);
    this.setDefaultHook = this.setDefaultHook.bind(this);
    this.setRequiredHook = this.setRequiredHook.bind(this);
    this.dispatch = this.dispatch.bind(this);
    this.process = this.process.bind(this);
  }

  ownable = async (ownableMsg: OwnableMsg, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      ownable: ownableMsg
    }, fee, memo, _funds);
  };
  setDefaultIsm = async ({
    ism
  }: {
    ism: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      set_default_ism: {
        ism
      }
    }, fee, memo, _funds);
  };
  setDefaultHook = async ({
    hook
  }: {
    hook: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      set_default_hook: {
        hook
      }
    }, fee, memo, _funds);
  };
  setRequiredHook = async ({
    hook
  }: {
    hook: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      set_required_hook: {
        hook
      }
    }, fee, memo, _funds);
  };
  dispatch = async ({
    destDomain,
    hook,
    metadata,
    msgBody,
    recipientAddr
  }: {
    destDomain: number;
    hook?: string;
    metadata?: HexBinary;
    msgBody: HexBinary;
    recipientAddr: HexBinary;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      dispatch: {
        dest_domain: destDomain,
        hook,
        metadata,
        msg_body: msgBody,
        recipient_addr: recipientAddr
      }
    }, fee, memo, _funds);
  };
  process = async ({
    message,
    metadata
  }: {
    message: HexBinary;
    metadata: HexBinary;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      process: {
        message,
        metadata
      }
    }, fee, memo, _funds);
  };
}