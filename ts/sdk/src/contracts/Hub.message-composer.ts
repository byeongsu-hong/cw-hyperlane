/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.16.5.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { Coin } from "@cosmjs/amino";
import { MsgExecuteContractEncodeObject } from "cosmwasm";
import { MsgExecuteContract } from "cosmjs-types/cosmwasm/wasm/v1/tx";
import { toUtf8 } from "@cosmjs/encoding";
import { InstantiateMsg, ExecuteMsg, QueryMsg, MigrateMsg, OriginDomainResponse } from "./Hub.types";
export interface HubMessage {
  contractAddress: string;
  sender: string;
  instantiate: ({
    defaultIsm,
    owner
  }: {
    defaultIsm: string;
    owner: string;
  }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
  migrate: (funds?: Coin[]) => MsgExecuteContractEncodeObject;
}
export class HubMessageComposer implements HubMessage {
  sender: string;
  contractAddress: string;

  constructor(sender: string, contractAddress: string) {
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.instantiate = this.instantiate.bind(this);
    this.migrate = this.migrate.bind(this);
  }

  instantiate = ({
    defaultIsm,
    owner
  }: {
    defaultIsm: string;
    owner: string;
  }, funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          instantiate: {
            default_ism: defaultIsm,
            owner
          }
        })),
        funds
      })
    };
  };
  migrate = (funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          migrate: {}
        })),
        funds
      })
    };
  };
}