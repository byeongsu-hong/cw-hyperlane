/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.16.5.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { Coin } from "@cosmjs/amino";
import { MsgExecuteContractEncodeObject } from "cosmwasm";
import { MsgExecuteContract } from "cosmjs-types/cosmwasm/wasm/v1/tx";
import { toUtf8 } from "@cosmjs/encoding";
import { InstantiateMsg, ExecuteMsg, HexBinary, QueryMsg, MigrateMsg, CheckPointResponse, CountResponse, NonceResponse, PausedResponse, RootResponse } from "./Mailbox.types";
export interface MailboxMessage {
  contractAddress: string;
  sender: string;
  pause: (funds?: Coin[]) => MsgExecuteContractEncodeObject;
  unpause: (funds?: Coin[]) => MsgExecuteContractEncodeObject;
  setDefaultISM: ({
    ism
  }: {
    ism: string;
  }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
  dispatch: ({
    destDomain,
    msgBody,
    recipientAddr
  }: {
    destDomain: number;
    msgBody: HexBinary;
    recipientAddr: HexBinary;
  }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
  process: ({
    message,
    metadata
  }: {
    message: HexBinary;
    metadata: HexBinary;
  }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
}
export class MailboxMessageComposer implements MailboxMessage {
  sender: string;
  contractAddress: string;

  constructor(sender: string, contractAddress: string) {
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.pause = this.pause.bind(this);
    this.unpause = this.unpause.bind(this);
    this.setDefaultISM = this.setDefaultISM.bind(this);
    this.dispatch = this.dispatch.bind(this);
    this.process = this.process.bind(this);
  }

  pause = (funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          pause: {}
        })),
        funds
      })
    };
  };
  unpause = (funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          unpause: {}
        })),
        funds
      })
    };
  };
  setDefaultISM = ({
    ism
  }: {
    ism: string;
  }, funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          set_default_i_s_m: {
            ism
          }
        })),
        funds
      })
    };
  };
  dispatch = ({
    destDomain,
    msgBody,
    recipientAddr
  }: {
    destDomain: number;
    msgBody: HexBinary;
    recipientAddr: HexBinary;
  }, funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          dispatch: {
            dest_domain: destDomain,
            msg_body: msgBody,
            recipient_addr: recipientAddr
          }
        })),
        funds
      })
    };
  };
  process = ({
    message,
    metadata
  }: {
    message: HexBinary;
    metadata: HexBinary;
  }, funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          process: {
            message,
            metadata
          }
        })),
        funds
      })
    };
  };
}