/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.35.3.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { MsgExecuteContractEncodeObject } from "@cosmjs/cosmwasm-stargate";
import { MsgExecuteContract } from "cosmjs-types/cosmwasm/wasm/v1/tx";
import { toUtf8 } from "@cosmjs/encoding";
import { InstantiateMsg, ExecuteMsg, OwnableMsg, HexBinary, DispatchMsg, QueryMsg, OwnableQueryMsg, MailboxHookQueryMsg, MailboxQueryMsg, DefaultHookResponse, DefaultIsmResponse, Addr, OwnerResponse, PendingOwnerResponse, HrpResponse, LatestDispatchedIdResponse, LocalDomainResponse, MessageDeliveredResponse, NonceResponse, Uint128, QuoteDispatchResponse, Coin, RecipientIsmResponse, RequiredHookResponse } from "./Mailbox.types";
export interface MailboxMsg {
  contractAddress: string;
  sender: string;
  ownable: (ownableMsg: OwnableMsg, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  setDefaultIsm: ({
    ism
  }: {
    ism: string;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  setDefaultHook: ({
    hook
  }: {
    hook: string;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  setRequiredHook: ({
    hook
  }: {
    hook: string;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  dispatch: ({
    destDomain,
    hook,
    metadata,
    msgBody,
    recipientAddr
  }: {
    destDomain: number;
    hook?: string;
    metadata?: HexBinary;
    msgBody: HexBinary;
    recipientAddr: HexBinary;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  process: ({
    message,
    metadata
  }: {
    message: HexBinary;
    metadata: HexBinary;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
}
export class MailboxMsgComposer implements MailboxMsg {
  sender: string;
  contractAddress: string;

  constructor(sender: string, contractAddress: string) {
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.ownable = this.ownable.bind(this);
    this.setDefaultIsm = this.setDefaultIsm.bind(this);
    this.setDefaultHook = this.setDefaultHook.bind(this);
    this.setRequiredHook = this.setRequiredHook.bind(this);
    this.dispatch = this.dispatch.bind(this);
    this.process = this.process.bind(this);
  }

  ownable = (ownableMsg: OwnableMsg, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          ownable: ownableMsg
        })),
        funds: _funds
      })
    };
  };
  setDefaultIsm = ({
    ism
  }: {
    ism: string;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          set_default_ism: {
            ism
          }
        })),
        funds: _funds
      })
    };
  };
  setDefaultHook = ({
    hook
  }: {
    hook: string;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          set_default_hook: {
            hook
          }
        })),
        funds: _funds
      })
    };
  };
  setRequiredHook = ({
    hook
  }: {
    hook: string;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          set_required_hook: {
            hook
          }
        })),
        funds: _funds
      })
    };
  };
  dispatch = ({
    destDomain,
    hook,
    metadata,
    msgBody,
    recipientAddr
  }: {
    destDomain: number;
    hook?: string;
    metadata?: HexBinary;
    msgBody: HexBinary;
    recipientAddr: HexBinary;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          dispatch: {
            dest_domain: destDomain,
            hook,
            metadata,
            msg_body: msgBody,
            recipient_addr: recipientAddr
          }
        })),
        funds: _funds
      })
    };
  };
  process = ({
    message,
    metadata
  }: {
    message: HexBinary;
    metadata: HexBinary;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          process: {
            message,
            metadata
          }
        })),
        funds: _funds
      })
    };
  };
}