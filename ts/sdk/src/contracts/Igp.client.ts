/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.35.3.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee } from "@cosmjs/amino";
import { InstantiateMsg, ExecuteMsg, OwnableMsg, RouterMsgForAddr, Addr, HexBinary, Uint256, DomainRouteSetForAddr, PostDispatchMsg, QueryMsg, OwnableQueryMsg, HookQueryMsg, RouterQueryForAddr, Order, IgpGasOracleQueryMsg, IgpQueryMsg, QuoteDispatchMsg, BeneficiaryResponse, DomainsResponse, Uint128, GetExchangeRateAndGasPriceResponse, OwnerResponse, PendingOwnerResponse, RouteResponseForAddr, RoutesResponseForAddr, MailboxResponse, Empty, QuoteDispatchResponse, Coin, QuoteGasPaymentResponse } from "./Igp.types";
export interface IgpReadOnlyInterface {
  contractAddress: string;
  ownable: (ownableQueryMsg: OwnableQueryMsg) => Promise<OwnableResponse>;
  hook: (hookQueryMsg: HookQueryMsg) => Promise<HookResponse>;
  router: (routerQueryForAddr: RouterQueryForAddr) => Promise<RouterResponse>;
  oracle: (igpGasOracleQueryMsg: IgpGasOracleQueryMsg) => Promise<OracleResponse>;
  igp: (igpQueryMsg: IgpQueryMsg) => Promise<IgpResponse>;
}
export class IgpQueryClient implements IgpReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.ownable = this.ownable.bind(this);
    this.hook = this.hook.bind(this);
    this.router = this.router.bind(this);
    this.oracle = this.oracle.bind(this);
    this.igp = this.igp.bind(this);
  }

  ownable = async (ownableQueryMsg: OwnableQueryMsg): Promise<OwnableResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      ownable: ownableQueryMsg
    });
  };
  hook = async (hookQueryMsg: HookQueryMsg): Promise<HookResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      hook: hookQueryMsg
    });
  };
  router = async (routerQueryForAddr: RouterQueryForAddr): Promise<RouterResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      router: routerQueryForAddr
    });
  };
  oracle = async (igpGasOracleQueryMsg: IgpGasOracleQueryMsg): Promise<OracleResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      oracle: igpGasOracleQueryMsg
    });
  };
  igp = async (igpQueryMsg: IgpQueryMsg): Promise<IgpResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      igp: igpQueryMsg
    });
  };
}
export interface IgpInterface extends IgpReadOnlyInterface {
  contractAddress: string;
  sender: string;
  ownable: (ownableMsg: OwnableMsg, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  router: (routerMsgForAddr: RouterMsgForAddr, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  postDispatch: ({
    message,
    metadata
  }: {
    message: HexBinary;
    metadata: HexBinary;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  setBeneficiary: ({
    beneficiary
  }: {
    beneficiary: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  payForGas: ({
    destDomain,
    gasAmount,
    messageId,
    refundAddress
  }: {
    destDomain: number;
    gasAmount: Uint256;
    messageId: HexBinary;
    refundAddress: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  claim: (fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
export class IgpClient extends IgpQueryClient implements IgpInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.ownable = this.ownable.bind(this);
    this.router = this.router.bind(this);
    this.postDispatch = this.postDispatch.bind(this);
    this.setBeneficiary = this.setBeneficiary.bind(this);
    this.payForGas = this.payForGas.bind(this);
    this.claim = this.claim.bind(this);
  }

  ownable = async (ownableMsg: OwnableMsg, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      ownable: ownableMsg
    }, fee, memo, _funds);
  };
  router = async (routerMsgForAddr: RouterMsgForAddr, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      router: routerMsgForAddr
    }, fee, memo, _funds);
  };
  postDispatch = async ({
    message,
    metadata
  }: {
    message: HexBinary;
    metadata: HexBinary;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      post_dispatch: {
        message,
        metadata
      }
    }, fee, memo, _funds);
  };
  setBeneficiary = async ({
    beneficiary
  }: {
    beneficiary: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      set_beneficiary: {
        beneficiary
      }
    }, fee, memo, _funds);
  };
  payForGas = async ({
    destDomain,
    gasAmount,
    messageId,
    refundAddress
  }: {
    destDomain: number;
    gasAmount: Uint256;
    messageId: HexBinary;
    refundAddress: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      pay_for_gas: {
        dest_domain: destDomain,
        gas_amount: gasAmount,
        message_id: messageId,
        refund_address: refundAddress
      }
    }, fee, memo, _funds);
  };
  claim = async (fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      claim: {}
    }, fee, memo, _funds);
  };
}