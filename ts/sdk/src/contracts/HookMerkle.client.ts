/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.35.3.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee } from "@cosmjs/amino";
import { InstantiateMsg, ExecuteMsg, OwnableMsg, HexBinary, PostDispatchMsg, QueryMsg, OwnableQueryMsg, HookQueryMsg, MerkleHookQueryMsg, QuoteDispatchMsg, BranchResponse, CheckPointResponse, CountResponse, Addr, OwnerResponse, PendingOwnerResponse, MailboxResponse, Uint128, QuoteDispatchResponse, Coin, RootResponse, TreeResponse } from "./HookMerkle.types";
export interface HookMerkleReadOnlyInterface {
  contractAddress: string;
  ownable: (ownableQueryMsg: OwnableQueryMsg) => Promise<OwnableResponse>;
  hook: (hookQueryMsg: HookQueryMsg) => Promise<HookResponse>;
  merkleHook: (merkleHookQueryMsg: MerkleHookQueryMsg) => Promise<MerkleHookResponse>;
}
export class HookMerkleQueryClient implements HookMerkleReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.ownable = this.ownable.bind(this);
    this.hook = this.hook.bind(this);
    this.merkleHook = this.merkleHook.bind(this);
  }

  ownable = async (ownableQueryMsg: OwnableQueryMsg): Promise<OwnableResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      ownable: ownableQueryMsg
    });
  };
  hook = async (hookQueryMsg: HookQueryMsg): Promise<HookResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      hook: hookQueryMsg
    });
  };
  merkleHook = async (merkleHookQueryMsg: MerkleHookQueryMsg): Promise<MerkleHookResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      merkle_hook: merkleHookQueryMsg
    });
  };
}
export interface HookMerkleInterface extends HookMerkleReadOnlyInterface {
  contractAddress: string;
  sender: string;
  ownable: (ownableMsg: OwnableMsg, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  postDispatch: ({
    message,
    metadata
  }: {
    message: HexBinary;
    metadata: HexBinary;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
export class HookMerkleClient extends HookMerkleQueryClient implements HookMerkleInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.ownable = this.ownable.bind(this);
    this.postDispatch = this.postDispatch.bind(this);
  }

  ownable = async (ownableMsg: OwnableMsg, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      ownable: ownableMsg
    }, fee, memo, _funds);
  };
  postDispatch = async ({
    message,
    metadata
  }: {
    message: HexBinary;
    metadata: HexBinary;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      post_dispatch: {
        message,
        metadata
      }
    }, fee, memo, _funds);
  };
}