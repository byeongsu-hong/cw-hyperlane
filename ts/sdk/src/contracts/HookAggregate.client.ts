/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.35.3.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee } from "@cosmjs/amino";
import { InstantiateMsg, ExecuteMsg, OwnableMsg, HexBinary, PostDispatchMsg, QueryMsg, OwnableQueryMsg, HookQueryMsg, AggregateHookQueryMsg, QuoteDispatchMsg, Addr, OwnerResponse, PendingOwnerResponse, HooksResponse, MailboxResponse, Uint128, QuoteDispatchResponse, Coin } from "./HookAggregate.types";
export interface HookAggregateReadOnlyInterface {
  contractAddress: string;
  ownable: (ownableQueryMsg: OwnableQueryMsg) => Promise<OwnableResponse>;
  hook: (hookQueryMsg: HookQueryMsg) => Promise<HookResponse>;
  aggregateHook: (aggregateHookQueryMsg: AggregateHookQueryMsg) => Promise<AggregateHookResponse>;
}
export class HookAggregateQueryClient implements HookAggregateReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.ownable = this.ownable.bind(this);
    this.hook = this.hook.bind(this);
    this.aggregateHook = this.aggregateHook.bind(this);
  }

  ownable = async (ownableQueryMsg: OwnableQueryMsg): Promise<OwnableResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      ownable: ownableQueryMsg
    });
  };
  hook = async (hookQueryMsg: HookQueryMsg): Promise<HookResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      hook: hookQueryMsg
    });
  };
  aggregateHook = async (aggregateHookQueryMsg: AggregateHookQueryMsg): Promise<AggregateHookResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      aggregate_hook: aggregateHookQueryMsg
    });
  };
}
export interface HookAggregateInterface extends HookAggregateReadOnlyInterface {
  contractAddress: string;
  sender: string;
  ownable: (ownableMsg: OwnableMsg, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  postDispatch: ({
    message,
    metadata
  }: {
    message: HexBinary;
    metadata: HexBinary;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  setHooks: ({
    hooks
  }: {
    hooks: string[];
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
export class HookAggregateClient extends HookAggregateQueryClient implements HookAggregateInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.ownable = this.ownable.bind(this);
    this.postDispatch = this.postDispatch.bind(this);
    this.setHooks = this.setHooks.bind(this);
  }

  ownable = async (ownableMsg: OwnableMsg, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      ownable: ownableMsg
    }, fee, memo, _funds);
  };
  postDispatch = async ({
    message,
    metadata
  }: {
    message: HexBinary;
    metadata: HexBinary;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      post_dispatch: {
        message,
        metadata
      }
    }, fee, memo, _funds);
  };
  setHooks = async ({
    hooks
  }: {
    hooks: string[];
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      set_hooks: {
        hooks
      }
    }, fee, memo, _funds);
  };
}